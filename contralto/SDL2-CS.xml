<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SDL2-CS</name>
    </assembly>
    <members>
        <member name="T:SDL2.SDL">
            <summary>
            Entry point for all SDL-related (non-extension) types and methods
            </summary>
        </member>
        <member name="F:SDL2.SDL.nativeLibName">
            <summary>
            Used by DllImport to load the native library.
            </summary>
        </member>
        <member name="M:SDL2.SDL.INTERNAL_SDL_RWFromFile(System.String,System.String)">
            <summary>
            Use this function to create a new SDL_RWops structure for reading from and/or writing to a named file.
            </summary>
            <param name="file">a UTF-8 string representing the filename to open</param>
            <param name="mode">an ASCII string representing the mode to be used for opening the file; see Remarks for details</param>
            <returns>Returns a pointer to the SDL_RWops structure that is created, or NULL on failure; call SDL_GetError() for more information.</returns>
        </member>
        <member name="M:SDL2.SDL.SDL_SetMainReady">
            <summary>
            Use this function to circumvent failure of SDL_Init() when not using SDL_main() as an entry point.
            </summary>
        </member>
        <member name="M:SDL2.SDL.SDL_Init(System.UInt32)">
            <summary>
            Use this function to initialize the SDL library.
            This must be called before using any other SDL function.
            </summary>
            <param name="flags">subsystem initialization flags; see Remarks for details</param>
            <returns>Returns 0 on success or a negative error code on failure.
            Call <see cref="M:SDL2.SDL.SDL_GetError"/> for more information.</returns>
            <remarks>The Event Handling, File I/O, and Threading subsystems are initialized by default.
            You must specifically initialize other subsystems if you use them in your application.</remarks>
            <remarks>Unless the SDL_INIT_NOPARACHUTE flag is set, it will install cleanup signal handlers
            for some commonly ignored fatal signals (like SIGSEGV). </remarks>
        </member>
        <member name="M:SDL2.SDL.SDL_InitSubSystem(System.UInt32)">
            <summary>
            Use this function to initialize specific SDL subsystems.
            </summary>
            <param name="flags">any of the flags used by SDL_Init(); see Remarks for details</param>
            <returns>Returns 0 on success or a negative error code on failure.
            Call <see cref="M:SDL2.SDL.SDL_GetError"/> for more information.</returns>
            <remarks>After SDL has been initialized with <see cref="!:SDL_Init()"/> you may initialize
            uninitialized subsystems with <see cref="!:SDL_InitSubSystem()"/>.</remarks>
            <remarks>If you want to initialize subsystems separately you would call <see cref="!:SDL_Init(0)"/>
            followed by <see cref="!:SDL_InitSubSystem()"/> with the desired subsystem flag. </remarks>
        </member>
        <member name="M:SDL2.SDL.SDL_Quit">
            <summary>
            Use this function to clean up all initialized subsystems.
            You should call it upon all exit conditions.
            </summary>
            <remarks>You should call this function even if you have already shutdown each initialized
            subsystem with <see cref="!:SDL_QuitSubSystem()"/>.</remarks>
            <remarks>If you start a subsystem using a call to that subsystem's init function (for example
            <see cref="!:SDL_VideoInit()"/>) instead of <see cref="!:SDL_Init()"/> or <see cref="!:SDL_InitSubSystem()"/>,
            then you must use that subsystem's quit function (<see cref="M:SDL2.SDL.SDL_VideoQuit"/>) to shut it down
            before calling <see cref="M:SDL2.SDL.SDL_Quit"/>.</remarks>
            <remarks>You can use this function with atexit() to ensure that it is run when your application is
            shutdown, but it is not wise to do this from a library or other dynamically loaded code. </remarks>
        </member>
        <!-- Ungültiger XML-Kommentar wurde für den Member "M:SDL2.SDL.SDL_QuitSubSystem(System.UInt32)" ignoriert -->
        <member name="M:SDL2.SDL.SDL_WasInit(System.UInt32)">
            <summary>
            Use this function to return a mask of the specified subsystems which have previously been initialized.
            </summary>
            <param name="flags">any of the flags used by <see cref="!:SDL_Init()"/>; see Remarks for details</param>
            <returns>If flags is 0 it returns a mask of all initialized subsystems, otherwise it returns the
            initialization status of the specified subsystems. The return value does not include SDL_INIT_NOPARACHUTE.</returns>
        </member>
        <member name="M:SDL2.SDL.SDL_ClearHints">
            <summary>
            Use this function to clear all hints.
            </summary>
            <remarks>This function is automatically called during <see cref="M:SDL2.SDL.SDL_Quit"/>. </remarks>
        </member>
        <member name="M:SDL2.SDL.SDL_GetHint(System.String)">
            <summary>
            Use this function to get the value of a hint.
            </summary>
            <param name="name">the hint to query; see the list of hints on
            <a href="http://wiki.libsdl.org/moin.cgi/CategoryHints#Hints">CategoryHints</a> for details</param>
            <returns>Returns the string value of a hint or NULL if the hint isn't set.</returns>
        </member>
        <member name="M:SDL2.SDL.SDL_SetHint(System.String,System.String)">
            <summary>
            Use this function to set a hint with normal priority.
            </summary>
            <param name="name">the hint to query; see the list of hints on
            <a href="http://wiki.libsdl.org/moin.cgi/CategoryHints#Hints">CategoryHints</a> for details</param>
            <param name="value">the value of the hint variable</param>
            <returns>Returns SDL_TRUE if the hint was set, SDL_FALSE otherwise.</returns>
            <remarks>Hints will not be set if there is an existing override hint or environment
            variable that takes precedence. You can use <see cref="!:SDL_SetHintWithPriority()"/> to set the hint with
            override priority instead.</remarks>
        </member>
        <member name="M:SDL2.SDL.SDL_SetHintWithPriority(System.String,System.String,SDL2.SDL.SDL_HintPriority)">
            <summary>
            Use this function to set a hint with a specific priority.
            </summary>
            <param name="name">the hint to query; see the list of hints on
            <a href="http://wiki.libsdl.org/moin.cgi/CategoryHints#Hints">CategoryHints</a> for details</param>
            <param name="value">the value of the hint variable</param>
            <param name="priority">the <see cref="T:SDL2.SDL.SDL_HintPriority"/> level for the hint</param>
            <returns>Returns SDL_TRUE if the hint was set, SDL_FALSE otherwise.</returns>
            <remarks>The priority controls the behavior when setting a hint that already has a value.
            Hints will replace existing hints of their priority and lower. Environment variables are
            considered to have override priority. </remarks>
        </member>
        <member name="M:SDL2.SDL.SDL_ClearError">
            <summary>
            Use this function to clear any previous error message.
            </summary>
        </member>
        <member name="M:SDL2.SDL.SDL_GetError">
            <summary>
            Use this function to retrieve a message about the last error that occurred.
            </summary>
            <returns>Returns a message with information about the specific error that occurred,
            or an empty string if there hasn't been an error since the last call to <see cref="M:SDL2.SDL.SDL_ClearError"/>.
            Without calling <see cref="M:SDL2.SDL.SDL_ClearError"/>, the message is only applicable when an SDL function
            has signaled an error. You must check the return values of SDL function calls to determine
            when to appropriately call <see cref="M:SDL2.SDL.SDL_GetError"/>.
            This string is statically allocated and must not be freed by the application.</returns>
            <remarks>It is possible for multiple errors to occur before calling SDL_GetError(). Only the last error is returned. </remarks>
        </member>
        <member name="M:SDL2.SDL.SDL_SetError(System.String,)">
            <summary>
            Use this function to set the SDL error string.
            </summary>
            <param name="fmt">a printf() style message format string </param>
            <param name="......">additional parameters matching % tokens in the fmt string, if any</param>
            <remarks>Calling this function will replace any previous error message that was set.</remarks>
        </member>
        <member name="T:SDL2.SDL.SDL_LogPriority">
            <summary>
            An enumeration of the predefined log priorities.
            </summary>
        </member>
        <member name="T:SDL2.SDL.SDL_LogOutputFunction">
            <summary>
            Used as a callback for <see cref="!:SDL_LogGetOutputFunction()"/> and <see cref="!:SDL_LogSetOutputFunction()"/>
            </summary>
            <param name="userdata">what was passed as userdata to <see cref="!:SDL_LogSetOutputFunction()"/></param>
            <param name="category">the category of the message; see Remarks for details</param>
            <param name="priority">the priority of the message; see Remarks for details</param>
            <param name="message">the message being output</param>
            <remarks>The category can be one of SDL_LOG_CATEGORY*</remarks>
            <remarks>The priority can be one of SDL_LOG_PRIORITY*</remarks>
        </member>
        <member name="M:SDL2.SDL.SDL_Log(System.String,)">
            <summary>
            Use this function to log a message with SDL_LOG_CATEGORY_APPLICATION and SDL_LOG_PRIORITY_INFO.
            </summary>
            <param name="fmt">a printf() style message format string</param>
            <param name="......">additional parameters matching % tokens in the fmt string, if any</param>
        </member>
        <member name="M:SDL2.SDL.SDL_LogVerbose(System.Int32,System.String,)">
            <summary>
            Use this function to log a message with SDL_LOG_PRIORITY_VERBOSE.
            </summary>
            <param name="category">the category of the message; see Remarks for details</param>
            <param name="fmt">a printf() style message format string</param>
            <param name="......">additional parameters matching % tokens in the fmt string, if any</param>
            <remarks>The category can be one of SDL_LOG_CATEGORY*</remarks>
        </member>
        <member name="M:SDL2.SDL.SDL_LogDebug(System.Int32,System.String,)">
            <summary>
            Use this function to log a message with SDL_LOG_PRIORITY_DEBUG.
            </summary>
            <param name="category">the category of the message; see Remarks for details</param>
            <param name="fmt">a printf() style message format string</param>
            <param name="......">additional parameters matching % tokens in the fmt string, if any</param>
            <remarks>The category can be one of SDL_LOG_CATEGORY*</remarks>
        </member>
        <member name="M:SDL2.SDL.SDL_LogInfo(System.Int32,System.String,)">
            <summary>
            Use this function to log a message with SDL_LOG_PRIORITY_INFO.
            </summary>
            <param name="category">the category of the message; see Remarks for details</param>
            <param name="fmt">a printf() style message format string</param>
            <param name="......">additional parameters matching % tokens in the fmt string, if any</param>
            <remarks>The category can be one of SDL_LOG_CATEGORY*</remarks>
        </member>
        <member name="M:SDL2.SDL.SDL_LogWarn(System.Int32,System.String,)">
            <summary>
            Use this function to log a message with SDL_LOG_PRIORITY_WARN.
            </summary>
            <param name="category">the category of the message; see Remarks for details</param>
            <param name="fmt">a printf() style message format string</param>
            <param name="......">additional parameters matching % tokens in the fmt string, if any</param>
            <remarks>The category can be one of SDL_LOG_CATEGORY*</remarks>
        </member>
        <member name="M:SDL2.SDL.SDL_LogError(System.Int32,System.String,)">
            <summary>
            Use this function to log a message with SDL_LOG_PRIORITY_ERROR.
            </summary>
            <param name="category">the category of the message; see Remarks for details</param>
            <param name="fmt">a printf() style message format string</param>
            <param name="......">additional parameters matching % tokens in the fmt string, if any</param>
            <remarks>The category can be one of SDL_LOG_CATEGORY*</remarks>
        </member>
        <member name="M:SDL2.SDL.SDL_LogCritical(System.Int32,System.String,)">
            <summary>
            Use this function to log a message with SDL_LOG_PRIORITY_CRITICAL.
            </summary>
            <param name="category">the category of the message; see Remarks for details</param>
            <param name="fmt">a printf() style message format string</param>
            <param name="......">additional parameters matching % tokens in the fmt string, if any</param>
            <remarks>The category can be one of SDL_LOG_CATEGORY*</remarks>
        </member>
        <member name="M:SDL2.SDL.SDL_LogMessage(System.Int32,SDL2.SDL.SDL_LogPriority,System.String,)">
            <summary>
            Use this function to log a message with the specified category and priority.
            </summary>
            <param name="category">the category of the message; see Remarks for details</param>
            <param name="priority">the priority of the message; see Remarks for details</param>
            <param name="fmt">a printf() style message format string</param>
            <param name="......">additional parameters matching % tokens in the fmt string, if any</param>
            <remarks>The category can be one of SDL_LOG_CATEGORY*</remarks>
            <remarks>The priority can be one of SDL_LOG_PRIORITY*</remarks>
        </member>
        <member name="M:SDL2.SDL.SDL_LogMessageV(System.Int32,SDL2.SDL.SDL_LogPriority,System.String,)">
            <summary>
            Use this function to log a message with the specified category and priority.
            This version of <see cref="M:SDL2.SDL.SDL_LogMessage(System.Int32,SDL2.SDL.SDL_LogPriority,System.String,)"/> uses a stdarg variadic argument list.
            </summary>
            <param name="category">the category of the message; see Remarks for details</param>
            <param name="priority">the priority of the message; see Remarks for details</param>
            <param name="fmt">a printf() style message format string</param>
            <param name="......">additional parameters matching % tokens in the fmt string, if any</param>
        </member>
        <member name="M:SDL2.SDL.SDL_LogGetPriority(System.Int32)">
            <summary>
            Use this function to get the priority of a particular log category.
            </summary>
            <param name="category">the category to query; see Remarks for details</param>
            <returns>Returns the <see cref="T:SDL2.SDL.SDL_LogPriority"/> for the requested category; see Remarks for details. </returns>
            <remarks>The category can be one of SDL_LOG_CATEGORY*</remarks>
            <remarks>The returned priority will be one of SDL_LOG_PRIORITY*</remarks>
        </member>
        <member name="M:SDL2.SDL.SDL_LogSetPriority(System.Int32,SDL2.SDL.SDL_LogPriority)">
            <summary>
            Use this function to set the priority of a particular log category.
            </summary>
            <param name="category">the category to query; see Remarks for details</param>
            <param name="priority">the <see cref="T:SDL2.SDL.SDL_LogPriority"/> of the message; see Remarks for details</param>
            <remarks>The category can be one of SDL_LOG_CATEGORY*</remarks>
            <remarks>The priority can be one of SDL_LOG_PRIORITY*</remarks>
        </member>
        <member name="M:SDL2.SDL.SDL_LogSetAllPriority(SDL2.SDL.SDL_LogPriority)">
            <summary>
            Use this function to set the priority of all log categories.
            </summary>
            <param name="priority">the <see cref="T:SDL2.SDL.SDL_LogPriority"/> of the message; see Remarks for details</param>
            <remarks>The priority can be one of SDL_LOG_PRIORITY*</remarks>
        </member>
        <member name="M:SDL2.SDL.SDL_LogResetPriorities">
            <summary>
            Use this function to reset all priorities to default.
            </summary>
            <remarks>This is called in <see cref="M:SDL2.SDL.SDL_Quit"/>. </remarks>
        </member>
        <member name="M:SDL2.SDL.SDL_LogGetOutputFunction(SDL2.SDL.SDL_LogOutputFunction@,System.IntPtr@)">
            <summary>
            Use this function to get the current log output function.
            </summary>
            <param name="callback">a pointer filled in with the current log callback; see Remarks for details</param>
            <param name="userdata">a pointer filled in with the pointer that is passed to callback (refers to void*)</param>
        </member>
        <member name="M:SDL2.SDL.SDL_LogSetOutputFunction(SDL2.SDL.SDL_LogOutputFunction,System.IntPtr)">
            <summary>
            Use this function to replace the default log output function with one of your own.
            </summary>
            <param name="callback">the function to call instead of the default; see Remarks for details</param>
            <param name="userdata">a pointer that is passed to callback (refers to void*)</param>
        </member>
        <member name="M:SDL2.SDL.INTERNAL_SDL_ShowMessageBox(SDL2.SDL.INTERNAL_SDL_MessageBoxData@,System.Int32@)">
             <summary>
            
             </summary>
             <param name="messageboxdata"></param>
             <param name="buttonid"></param>
             <returns></returns>
        </member>
        <member name="M:SDL2.SDL.SDL_ShowMessageBox(SDL2.SDL.SDL_MessageBoxData@,System.Int32@)">
             <summary>
            
             </summary>
             <param name="messageboxdata"></param>
             <param name="buttonid"></param>
             <returns></returns>
        </member>
        <member name="M:SDL2.SDL.SDL_ShowSimpleMessageBox(SDL2.SDL.SDL_MessageBoxFlags,System.String,System.String,System.IntPtr)">
            <summary>
            Use this function to display a simple message box.
            </summary>
            <param name="flags">An <see cref="!:SDL_MessageBoxFlag"/>; see Remarks for details;</param>
            <param name="title">UTF-8 title text</param>
            <param name="message">UTF-8 message text</param>
            <param name="window">the parent window, or NULL for no parent (refers to a <see cref="!:SDL_Window"/></param>
            <returns>0 on success or a negative error code on failure; call SDL_GetError() for more information. </returns>
        </member>
        <member name="T:SDL2.SDL.SDL_version">
            <summary>
            A structure that contains information about the version of SDL in use.
            </summary>
            <remarks>Represents the library's version as three levels: </remarks>
            <remarks>major revision (increments with massive changes, additions, and enhancements) </remarks>
            <remarks>minor revision (increments with backwards-compatible changes to the major revision), and </remarks>
            <remarks>patchlevel (increments with fixes to the minor revision)</remarks>
            <remarks><see cref="M:SDL2.SDL.SDL_VERSION(SDL2.SDL.SDL_version@)"/> can be used to populate this structure with information</remarks>
        </member>
        <member name="M:SDL2.SDL.SDL_VERSION(SDL2.SDL.SDL_version@)">
            <summary>
            Use this macro to determine the SDL version your program was compiled against.
            </summary>
            <param name="x">an <see cref="T:SDL2.SDL.SDL_version"/> structure to initialize</param>
        </member>
        <member name="M:SDL2.SDL.SDL_VERSIONNUM(System.Int32,System.Int32,System.Int32)">
            <summary>
            Use this macro to convert separate version components into a single numeric value.
            </summary>
            <param name="X">major version; reported in thousands place</param>
            <param name="Y">minor version; reported in hundreds place</param>
            <param name="Z">update version (patchlevel); reported in tens and ones places</param>
            <returns></returns>
            <remarks>This assumes that there will never be more than 100 patchlevels.</remarks>
            <remarks>Example: SDL_VERSIONNUM(1,2,3) -> (1203)</remarks>
        </member>
        <member name="M:SDL2.SDL.SDL_VERSION_ATLEAST(System.Int32,System.Int32,System.Int32)">
            <summary>
            Use this macro to determine whether the SDL version compiled against is at least as new as the specified version.
            </summary>
            <param name="X">major version</param>
            <param name="Y">minor version</param>
            <param name="Z">update version (patchlevel)</param>
            <returns>This macro will evaluate to true if compiled with SDL version at least X.Y.Z. </returns>
        </member>
        <member name="M:SDL2.SDL.SDL_GetVersion(SDL2.SDL.SDL_version@)">
            <summary>
            Use this function to get the version of SDL that is linked against your program.
            </summary>
            <param name="ver">the <see cref="T:SDL2.SDL.SDL_version"/> structure that contains the version information</param>
            <remarks>This function may be called safely at any time, even before SDL_Init(). </remarks>
        </member>
        <member name="M:SDL2.SDL.SDL_GetRevision">
            <summary>
            Use this function to get the code revision of SDL that is linked against your program.
            </summary>
            <returns>Returns an arbitrary string, uniquely identifying the exact revision
            of the SDL library in use. </returns>
            <remarks>The revision is a string including sequential revision number that is
            incremented with each commit, and a hash of the last code change.</remarks>
            <remarks>Example: hg-5344:94189aa89b54</remarks>
            <remarks>This value is the revision of the code you are linked with and may be
            different from the code you are compiling with, which is found in the constant SDL_REVISION.</remarks>
        </member>
        <member name="M:SDL2.SDL.SDL_GetRevisionNumber">
            <summary>
            Use this function to get the revision number of SDL that is linked against your program.
            </summary>
            <returns>Returns a number uniquely identifying the exact revision of the SDL library in use.</returns>
            <remarks>This is an incrementing number based on commits to hg.libsdl.org.</remarks>
        </member>
        <member name="T:SDL2.SDL.SDL_BlendMode">
            <summary>
            An enumeration of blend modes used in SDL_RenderCopy() and drawing operations.
            </summary>
        </member>
        <member name="T:SDL2.SDL.SDL_GLattr">
            <summary>
            An enumeration of OpenGL configuration attributes.
            </summary>
        </member>
        <member name="T:SDL2.SDL.SDL_GLprofile">
            <summary>
            An enumeration of OpenGL profiles.
            </summary>
        </member>
        <member name="T:SDL2.SDL.SDL_GLcontext">
            <summary>
            This enumeration is used in conjunction with SDL_GL_SetAttribute
            and SDL_GL_CONTEXT_FLAGS. Multiple flags can be OR'd together.
            </summary>
        </member>
        <member name="T:SDL2.SDL.SDL_WindowEventID">
            <summary>
            An enumeration of window events.
            </summary>
        </member>
        <member name="T:SDL2.SDL.SDL_WindowFlags">
            <summary>
            An enumeration of window states.
            </summary>
        </member>
        <member name="T:SDL2.SDL.SDL_DisplayMode">
            <summary>
            A structure that describes a display mode.
            </summary>
        </member>
        <member name="M:SDL2.SDL.SDL_CreateWindow(System.String,System.Int32,System.Int32,System.Int32,System.Int32,SDL2.SDL.SDL_WindowFlags)">
            <summary>
            Use this function to create a window with the specified position, dimensions, and flags.
            </summary>
            <param name="title">the title of the window, in UTF-8 encoding</param>
            <param name="x">the x position of the window, SDL_WINDOWPOS_CENTERED, or SDL_WINDOWPOS_UNDEFINED</param>
            <param name="y">the y position of the window, SDL_WINDOWPOS_CENTERED, or SDL_WINDOWPOS_UNDEFINED</param>
            <param name="w">the width of the window</param>
            <param name="h">the height of the window</param>
            <param name="flags">0, or one or more <see cref="T:SDL2.SDL.SDL_WindowFlags"/> OR'd together;
            see Remarks for details</param>
            <returns>Returns the window that was created or NULL on failure; call <see cref="M:SDL2.SDL.SDL_GetError"/>
            for more information. (refers to an <see cref="!:SDL_Window"/>)</returns>
        </member>
        <member name="M:SDL2.SDL.SDL_CreateWindowAndRenderer(System.Int32,System.Int32,SDL2.SDL.SDL_WindowFlags,System.IntPtr@,System.IntPtr@)">
            <summary>
            Use this function to create a window and default renderer.
            </summary>
            <param name="width">The width of the window</param>
            <param name="height">The height of the window</param>
            <param name="window_flags">The flags used to create the window (see <see cref="!:SDL_CreateWindow()"/>)</param>
            <param name="window">A pointer filled with the window, or NULL on error (<see cref="!:SDL_Window*"/>)</param>
            <param name="renderer">A pointer filled with the renderer, or NULL on error <see cref="!:(SDL_Renderer*)"/></param>
            <returns>Returns 0 on success, or -1 on error; call <see cref="M:SDL2.SDL.SDL_GetError"/> for more information. </returns>
        </member>
        <member name="M:SDL2.SDL.SDL_CreateWindowFrom(System.IntPtr)">
            <summary>
            Use this function to create an SDL window from an existing native window.
            </summary>
            <param name="data">a pointer to driver-dependent window creation data, typically your native window cast to a void*</param>
            <returns>Returns the window (<see cref="!:SDL_Window"/>) that was created or NULL on failure;
            call <see cref="M:SDL2.SDL.SDL_GetError"/> for more information. </returns>
        </member>
        <member name="M:SDL2.SDL.SDL_DestroyWindow(System.IntPtr)">
            <summary>
            Use this function to destroy a window.
            </summary>
            <param name="window">the window to destroy (<see cref="!:SDL_Window"/>)</param>
        </member>
        <member name="M:SDL2.SDL.SDL_DisableScreenSaver">
            <summary>
            Use this function to prevent the screen from being blanked by a screen saver.
            </summary>
            <remarks>If you disable the screensaver, it is automatically re-enabled when SDL quits. </remarks>
        </member>
        <member name="M:SDL2.SDL.SDL_EnableScreenSaver">
            <summary>
            Use this function to allow the screen to be blanked by a screen saver.
            </summary>
        </member>
        <member name="M:SDL2.SDL.SDL_GetClosestDisplayMode(System.Int32,SDL2.SDL.SDL_DisplayMode@,SDL2.SDL.SDL_DisplayMode@)">
            <summary>
            Use this function to get the closest match to the requested display mode.
            </summary>
            <param name="displayIndex">the index of the display to query</param>
            <param name="mode">an <see cref="T:SDL2.SDL.SDL_DisplayMode"/> structure containing the desired display mode </param>
            <param name="closest">an <see cref="T:SDL2.SDL.SDL_DisplayMode"/> structure filled in with
            the closest match of the available display modes </param>
            <returns>Returns the passed in value closest or NULL if no matching video mode was available;
            (refers to a <see cref="T:SDL2.SDL.SDL_DisplayMode"/>)
            call <see cref="M:SDL2.SDL.SDL_GetError"/> for more information. </returns>
            <remarks>The available display modes are scanned and closest is filled in with the closest mode
            matching the requested mode and returned. The mode format and refresh rate default to the desktop
            mode if they are set to 0. The modes are scanned with size being first priority, format being
            second priority, and finally checking the refresh rate. If all the available modes are too small,
            then NULL is returned. </remarks>
        </member>
        <member name="M:SDL2.SDL.SDL_GetCurrentDisplayMode(System.Int32,SDL2.SDL.SDL_DisplayMode@)">
            <summary>
            Use this function to get information about the current display mode.
            </summary>
            <param name="displayIndex">the index of the display to query</param>
            <param name="mode">an <see cref="T:SDL2.SDL.SDL_DisplayMode"/> structure filled in with the current display mode</param>
            <returns>Returns 0 on success or a negative error code on failure;
            call <see cref="M:SDL2.SDL.SDL_GetError"/> for more information. </returns>
            <remarks>There's a difference between this function and <see cref="M:SDL2.SDL.SDL_GetDesktopDisplayMode(System.Int32,SDL2.SDL.SDL_DisplayMode@)"/> when SDL
            runs fullscreen and has changed the resolution. In that case this function will return the
            current display mode, and not the previous native display mode. </remarks>
        </member>
        <member name="M:SDL2.SDL.SDL_GetCurrentVideoDriver">
            <summary>
            Use this function to return the name of the currently initialized video driver.
            </summary>
            <returns>Returns the name of the current video driver or NULL if no driver has been initialized. </returns>
            <remarks>There's a difference between this function and <see cref="M:SDL2.SDL.SDL_GetCurrentDisplayMode(System.Int32,SDL2.SDL.SDL_DisplayMode@)"/> when SDL
            runs fullscreen and has changed the resolution. In that case this function will return the
            previous native display mode, and not the current display mode. </remarks>
        </member>
        <member name="M:SDL2.SDL.SDL_GetDesktopDisplayMode(System.Int32,SDL2.SDL.SDL_DisplayMode@)">
            <summary>
            Use this function to get information about the desktop display mode.
            </summary>
            <param name="displayIndex">the index of the display to query</param>
            <param name="mode">an <see cref="T:SDL2.SDL.SDL_DisplayMode"/> structure filled in with the current display mode</param>
            <returns>Returns 0 on success or a negative error code on failure;
            call <see cref="M:SDL2.SDL.SDL_GetError"/> for more information. </returns>
            <remarks>There's a difference between this function and <see cref="M:SDL2.SDL.SDL_GetCurrentDisplayMode(System.Int32,SDL2.SDL.SDL_DisplayMode@)"/> when SDL
            runs fullscreen and has changed the resolution. In that case this function will return the
            previous native display mode, and not the current display mode. </remarks>
        </member>
        <member name="M:SDL2.SDL.SDL_GetDisplayBounds(System.Int32,SDL2.SDL.SDL_Rect@)">
            <summary>
            Use this function to get the desktop area represented by a display, with the primary display located at 0,0.
            </summary>
            <param name="displayIndex">the index of the display to query</param>
            <param name="rect">the <see cref="T:SDL2.SDL.SDL_Rect"/> structure filled in with the display bounds</param>
            <returns>Returns 0 on success or a negative error code on failure;
            call <see cref="M:SDL2.SDL.SDL_GetError"/> for more information. </returns>
        </member>
        <!-- Ungültiger XML-Kommentar wurde für den Member "M:SDL2.SDL.SDL_GetDisplayMode(System.Int32,System.Int32,SDL2.SDL.SDL_DisplayMode@)" ignoriert -->
        <member name="M:SDL2.SDL.SDL_GetNumDisplayModes(System.Int32)">
            <summary>
            Use this function to return the number of available display modes.
            </summary>
            <param name="displayIndex">the index of the display to query</param>
            <returns>Returns a number >= 1 on success or a negative error code on failure;
            call <see cref="M:SDL2.SDL.SDL_GetError"/> for more information. </returns>
        </member>
        <member name="M:SDL2.SDL.SDL_GetNumVideoDisplays">
            <summary>
            Use this function to return the number of available video displays.
            </summary>
            <returns>Returns a number >= 1 or a negative error code on failure;
            call <see cref="M:SDL2.SDL.SDL_GetError"/> for more information. </returns>
        </member>
        <member name="M:SDL2.SDL.SDL_GetNumVideoDrivers">
            <summary>
            Use this function to get the number of video drivers compiled into SDL.
            </summary>
            <returns>Returns a number >= 1 on success or a negative error code on failure;
            call <see cref="M:SDL2.SDL.SDL_GetError"/> for more information. </returns>
        </member>
        <member name="M:SDL2.SDL.SDL_GetVideoDriver(System.Int32)">
            <summary>
            Use this function to get the name of a built in video driver.
            </summary>
            <param name="index">the index of a video driver</param>
            <returns>Returns the name of the video driver with the given index. </returns>
            <remarks>The video drivers are presented in the order in which they are normally checked during initialization. </remarks>
        </member>
        <member name="M:SDL2.SDL.SDL_GetWindowBrightness(System.IntPtr)">
            <summary>
            Use this function to get the brightness (gamma correction) for a window.
            </summary>
            <param name="window">the window to query (<see cref="!:SDL_Window"/>)</param>
            <returns>Returns the brightness for the window where 0.0 is completely dark and 1.0 is normal brightness. </returns>
        </member>
        <member name="M:SDL2.SDL.SDL_GetWindowData(System.IntPtr,System.String)">
            <summary>
            Use this function to retrieve the data pointer associated with a window.
            </summary>
            <param name="window">the window to query (<see cref="!:SDL_Window"/>)</param>
            <param name="name">the name of the pointer</param>
            <returns>Returns the value associated with name. (void*)</returns>
        </member>
        <member name="M:SDL2.SDL.SDL_GetWindowDisplayIndex(System.IntPtr)">
            <summary>
            Use this function to get the index of the display associated with a window.
            </summary>
            <param name="window">the window to query (<see cref="!:SDL_Window"/>)</param>
            <returns>Returns the index of the display containing the center of the window
            on success or a negative error code on failure;
            call <see cref="M:SDL2.SDL.SDL_GetError"/> for more information. </returns>
        </member>
        <member name="M:SDL2.SDL.SDL_GetWindowDisplayMode(System.IntPtr,SDL2.SDL.SDL_DisplayMode@)">
            <summary>
            Use this function to fill in information about the display mode to use when a window is visible at fullscreen.
            </summary>
            <param name="window">the window to query (<see cref="!:SDL_Window"/>)</param>
            <param name="mode">an <see cref="T:SDL2.SDL.SDL_DisplayMode"/> structure filled in with the fullscreen display mode</param>
            <returns>Returns 0 on success or a negative error code on failure;
            call <see cref="M:SDL2.SDL.SDL_GetError"/> for more information. </returns>
        </member>
        <member name="M:SDL2.SDL.SDL_GetWindowFlags(System.IntPtr)">
            <summary>
            Use this function to get the window flags.
            </summary>
            <param name="window">the window to query (<see cref="!:SDL_Window"/>)</param>
            <returns>Returns a mask of the <see cref="T:SDL2.SDL.SDL_WindowFlags"/> associated with window; see Remarks for details.</returns>
        </member>
        <member name="M:SDL2.SDL.SDL_GetWindowFromID(System.UInt32)">
            <summary>
            Use this function to get a window from a stored ID.
            </summary>
            <param name="id">the ID of the window</param>
            <returns>Returns the window associated with id or NULL if it doesn't exist (<see cref="!:SDL_Window"/>);
            call <see cref="M:SDL2.SDL.SDL_GetError"/> for more information. </returns>
        </member>
        <member name="M:SDL2.SDL.SDL_LockTexture(System.IntPtr,SDL2.SDL.SDL_Rect@,System.IntPtr@,System.Int32@)">
            <summary>
            Use this function to lock a portion of the texture for write-only pixel access.
            </summary>
            <param name="texture">the texture to lock for access, which was created with
            SDL_TEXTUREACCESS_STREAMING (refers to a SDL_Texture*)</param>
            <param name="rect">an SDL_Rect structure representing the area to lock for access;
            NULL to lock the entire texture </param>
            <param name="pixels">this is filled in with a pointer to the locked pixels, appropriately
            offset by the locked area (refers to a void*)</param>
            <param name="pitch">this is filled in with the pitch of the locked pixels </param>
            <returns>Returns 0 on success or a negative error code if the texture is not valid or
            was not created with SDL_TEXTUREACCESS_STREAMING; call <see cref="M:SDL2.SDL.SDL_GetError"/> for more information. </returns>
        </member>
        <member name="M:SDL2.SDL.SDL_LockTexture(System.IntPtr,System.IntPtr,System.IntPtr@,System.Int32@)">
            <summary>
            Use this function to lock a portion of the texture for write-only pixel access. This overload
            allows for passing an IntPtr.Zero (null) rect value to lock the entire texture.
            </summary>
            <param name="texture">the texture to lock for access, which was created with
            SDL_TEXTUREACCESS_STREAMING (refers to a SDL_Texture*)</param>
            <param name="rect">an SDL_Rect structure representing the area to lock for access;
            NULL to lock the entire texture </param>
            <param name="pixels">this is filled in with a pointer to the locked pixels, appropriately
            offset by the locked area (refers to a void*)</param>
            <param name="pitch">this is filled in with the pitch of the locked pixels </param>
            <returns>Returns 0 on success or a negative error code if the texture is not valid or
            was not created with SDL_TEXTUREACCESS_STREAMING; call <see cref="M:SDL2.SDL.SDL_GetError"/> for more information. </returns>
        </member>
        <member name="M:SDL2.SDL.SDL_GetNumTouchDevices">
            \brief Get the number of registered touch devices.
        </member>
        <member name="M:SDL2.SDL.SDL_GetTouchDevice(System.Int32)">
            \brief Get the touch ID with the given index, or 0 if the index is invalid.
        </member>
        <member name="M:SDL2.SDL.SDL_GetNumTouchFingers(System.Int64)">
            \brief Get the number of active fingers for a given touch device.
        </member>
        <member name="M:SDL2.SDL.SDL_GetTouchFinger(System.Int64,System.Int32)">
            \brief Get the finger object of the given touch, with the given index.
            Returns pointer to SDL_Finger.
        </member>
        <member name="M:SDL2.SDL.SDL_GetBasePath">
             <summary>
             Get the path where the application resides.
            
             Get the "base path". This is the directory where the application was run
             from, which is probably the installation directory, and may or may not
             be the process's current working directory.
            
             This returns an absolute path in UTF-8 encoding, and is garunteed to
             end with a path separator ('\\' on Windows, '/' most other places).
             </summary>
             <returns>string of base dir in UTF-8 encoding</returns>
             <remarks>The underlying C string is owned by the application,
             and can be NULL on some platforms.
            
             This function is not necessarily fast, so you should only
             call it once and save the string if you need it.
            
             This function is only available in SDL 2.0.1 and later.</remarks>
        </member>
        <member name="M:SDL2.SDL.SDL_GetPrefPath(System.String,System.String)">
             <summary>
             Get the user-and-app-specific path where files can be written.
            
             Get the "pref dir". This is meant to be where users can write personal
             files (preferences and save games, etc) that are specific to your
             application. This directory is unique per user, per application.
            
             This function will decide the appropriate location in the native filesystem¸
             create the directory if necessary, and return a string of the absolute
             path to the directory in UTF-8 encoding.
             </summary>
             <param name="org">The name of your organization.</param>
             <param name="app">The name of your application.</param>
             <returns>UTF-8 string of user dir in platform-dependent notation. NULL
             if there's a problem (creating directory failed, etc).</returns>
             <remarks>The underlying C string is owned by the application,
             and can be NULL on some platforms. .NET provides some similar functions.
            
             This function is not necessarily fast, so you should only
             call it once and save the string if you need it.
            
             This function is only available in SDL 2.0.1 and later.</remarks>
        </member>
        <member name="M:SDL2.SDL.SDL_GetCPUCount">
            <summary>
            This function returns the number of CPU cores available.
            </summary>
            <returns>The number of CPU cores available.</returns>
        </member>
        <member name="M:SDL2.SDL.SDL_GetSystemRAM">
            <summary>
            This function returns the amount of RAM configured in the system, in MB.
            </summary>
            <returns>The amount of RAM configured in the system, in MB.</returns>
            <remarks>
            This function is only available in SDL 2.0.1 and later.
            </remarks>
        </member>
    </members>
</doc>
