'Add window outlines to project thumbnails' Class understands: 'printMethod: sel on: stream | cat code codeStream	[cat _ self organization invert: sel.	code _ self code: sel.	[code is: Paragraph  [code _ code text]].	stream append: self title + '' understands: ''.	if ((9 13 32) has: code last) then ["remove trailing whitespace"		codeStream _ code asStream settoend.		while [(9 13 32) has: codeStream last] do [codeStream skip:1].		code _ codeStream contents].	if (code has: 30)	then [ "escape chunk separator"		codeStream _ code asStream.		until [stream print: (codeStream upto: 30). codeStream end]		do [stream append: '' + 30 inString + '']]	else [stream print: code].	[cat = false or cat = ''As yet unclassified''  []	stream append: '' classified: ''; print: cat].	stream cr]' classified: 'fileIn/Out'ProjectWindow understands: 'fixframe: r | ext factor	[ext _ r extent max: 6464.	factor _ userview screenrect extent / ext.	factor _ (factor x max: factor y) max: 3.	[factor nomask: 1  [factor _ factor + 1]].	ext _ userview screenrect extent / factor.	r origin extent: ext]' classified: 'initialize-release'ProjectWindow understands: 'makeIcon | factor icon outlines blt i win r	[nil  frame  [] "top-level project window has no frame"	factor _ userview screenrect extent / frame extent.	factor _ factor x min: factor y.	icon _ DisplayForm scaledDown: factor.	if true then [	"set to true for window outlines"		outlines _ Form new.		outlines extent: icon extent; white.		blt _ BitBlt new.		blt destForm _ outlines.		for i from: userview sched length to: 1 by: 1 do [			(win _ userview schedi) Is: Window  [				r _ win frame / factor.				blt bltrect: r topt: r origin mode: 12 color: black.				r _ r inset: 1.				blt bltrect: r topt: r origin mode: 12 color: white]].		outlines displayat: 00 effect: oring in: icon].	self style: fill _ icon]' classified: 'drawing'Rectangle understands: '* scale ["Return a Rectangle which is the product of me and scale (which is a Rectangle, Point, or Number)"	Rectangle new origin: origin * scale asRectOrigin corner: corner * scale asRectCorner]' classified: 'arithmetic'Rectangle understands: '+ delta ["Return a Rectangle which is the sum of me and delta (which is a Rectangle, Point, or Number)"	Rectangle new origin: origin + delta asRectOrigin corner: corner + delta asRectCorner]' classified: 'arithmetic'Rectangle understands: '- delta ["Return a Rectangle which is the difference of me and delta (which is a Rectangle, Point, or Number)"	Rectangle new origin: origin - delta asRectOrigin corner: corner - delta asRectCorner]' classified: 'arithmetic'Rectangle understands: '/ scale ["Return a Rectangle which is the quotient of me and scale (which is a Rectangle, Point, or Number)"	Rectangle new origin: origin / scale asRectOrigin corner: corner / scale asRectCorner]' classified: 'arithmetic'Rectangle understands: '| grid ["Return a Rectangle which is the result of me and grid (which is a Rectangle, Point, or Number)"	Rectangle new origin: origin | grid asRectOrigin corner: corner | grid asRectCorner]' classified: 'arithmetic'| w .for w from: user allWindowsInAllProjects do [	w is: ProjectWindow  [		w frame  nil  []		w frame: w frame]]