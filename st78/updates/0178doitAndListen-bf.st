'Make Cmd-D work for doit and Cmd-Shift-D create a listener prompt'CodePane understands: 'doit | sel result printer 	[scrollBar hidewhile 		[sel _ pared selectRange.		[sel empty  [pared selectLine. sel _ pared selectRange]].		pared unselect; fintype.		result _ selectorPane execute: pared selectionAsStream for: self.		[result  nil or sel  pared selectRange  []		sel _ sel stop + 1.		printer _ (String new: 100) asStream.		printer space.		printer print: result.		pared selectRange: (sel to: sel).		pared paste: printer contents]]]'TextImage understands: 'doit: forListener  | result strm c2s s	"Listener wants CR, prompt;  cmd-D wants space and select result"	["if null selection, extend to prompt or current line"	[c1 = c2  [self selectLine] self unselect].	c2s _ c2.	"evaluate the selection"	result _ Generator new evaluate: self selectionAsStream in: false to: nil notifying: self.	self select: c2s.	strm _ Stream default.	forListener 		[strm next_ 30; cr; print: result; cr; next_ 20.		self paste: strm contents.		self select: c2]	"doit"	strm space; print: result; cr.	self paste: strm contents]'TextImage understands: 'isListening | i	[ "If there is a prompt at the start of the current line we''re a listener"	c1  c2 or para length = 0  [false]	i _ c1 min: para length.	until (i  1 or para(i-1)=13) do		[i _ i - 1].	i > para length  [false]	 parai = 20]'TextImage understands: 'kbd | typed key 	[c1 < c2 and self checklooks  []	typed _ Set new string: 16.	[begintypein  []	Deletion _ self selection.	begintypein _ c1].	while [key _ user kbdnext.	key] do		[key = bs 			[c1 < c2  [] "deleting selection happens below"			typed empty 				[c1 _ 1 max: c1 - 1.				begintypein _ begintypein min: c1]			typed skip: 1]		key = cut  [self copyselection] "because mapped to cmd-c"		key = paste 			[self replace: typed.			begintypein _ c1 _ c2.			self paste]		key = ctlw 			[ [typed empty  [] self replace: typed. typed reset. c1 _ c2].			c1 _ 1 max: c1 - 1.			while (c1 > 1 and (para  (c1 - 1)) tokenish) do				[c1 _ c1 - 1].			begintypein _ begintypein min: c1]		key = esc 			[ [typed empty  [] self replace: typed. typed reset. c1 _ c2].			self fintype.			c1 _ c2 - Scrap length.			self complement]		key = 130   "doit"			[[typed empty  [] self replace: typed. typed reset. c1 _ c2].			begintypein _ false.			self doit: false]		key = 167  "doit prompt"			[typed next_ 20]		key = 13  "cr: if listening doit, otherwise insert"			[[typed empty  [] self replace: typed. typed reset. c1 _ c2].			self isListening  [begintypein _ false. self doit: true]			typed next_ key]		typed next_ key].	self replace: typed.	c1 _ c2.	self selectAndScroll]'TextImage understands: 'select: cursorPos 	[self complement: off.	c1 _ c2 _ cursorPos.	self selectAndScroll]'TextImage understands: 'selectLine 	[ "Extend the current selection back to CR or prompt,		and forward to the end of the line or text"	c1 _ 1 max: c1 - 1.	until (c1 = 1 or ((para(c1-1)=13) or: (para(c1-1)=20))) do		[c1 _ c1 - 1].	c2 _ para length+1 min: c1.	until (c2 = (para length+1) or parac2=13) do		[c2 _ c2 + 1].	]'