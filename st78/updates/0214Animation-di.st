Class new title: AnimWindow	subclassof: FormWindow	fields: 'frames current stepTime'	declare: '';	classified: 'Windows'Class new title: BitRectTool	subclassof: Object	fields: 'action mode penwidth gray grid brush brushpt pencil tone editor'	declare: 'blowupScale graypens ';	classified: 'Panes and Menus'Class new title: FaucetAnim	subclassof: Sequencer	fields: 'faucet faucetWindow loc drips dripsWindow '	declare: '';	classified: 'Project Sequencing'AnimWindow understands: 'currentFrame 	[ framescurrent]'AnimWindow understands: 'frames	[ frames]'AnimWindow understands: 'frames: frameVector tickTime: msDelay 	[frames _ frameVector.	stepTime _ msDelay.	]'AnimWindow understands: 'initLoc: loc frames: frameVector tickTime: msDelay 	[frames _ frameVector.	current _ 1.	form _ framescurrent.	stepTime _ msDelay.	frame _ loc rect: loc + form extent.	]'AnimWindow understands: 'showNextFrame  	[current _ current+1.	[current > frames length  [current _ 1]].	self form: framescurrent.	form displayat: frame origin effect: effect.	]'AnimWindow understands: 'tick  | time lastTick  	["Do nothing unless at least 250 ms has elapsed since last tick"	lastTick_ self style: lastTick.	time _ user ticks.	lastTickfalsefalse and time<(lastTick+stepTime)  [].	self style: lastTick _ time.	self showNextFrame	]'AnimWindow understands: 'yellowbug | choices choice 	[choices _ (''dst _ src'' ''dst or src'' ''dst xor src'' ''dst and src''		''dst _ ~src'' ''dst or ~src'' ''dst xor ~src'' ''dst and ~src'') copy.	for choice to: 8 do		[effect + 1 = choice  [choices  choice _ '' '' + (choices  choice) + ''  '']].	choice _ (Menu new stringFromVector: (choices concat: (''edit'' ''step''))) bug.	choice = 0  []	choice = 9  [form edit]	choice = 10  [self showNextFrame]	effect _ choice - 1.	(effect land: 3)  0  "needs background"		[[(self style: fill) = 0  [self style: fill _ nil]].		user restore: frame]	self show]'BitRectEditor understands: 'classInit | t i  "BitRectEditor classInit."   	[t _ Vector new: 6.	for i to: t length do [ti _ BitRectTool new init].	tools _ (RadioButtons new) vec: t at: 00 width: 20.	windowmenu _ Menu new string: ''undermovegrowclosefiloutprintbitsinspectinspect toolinspect pencil''.	actionpic_ BitRect new filin: updateURL + ''actionpic''.	toolpic_ BitRect new filin: updateURL + ''toolpic''."	user fileString: updateURL + ''toolpic''""	toolpic_ BitRect new filin: updateURL + ''toolpic''.
""	(Form new extent: 20120) white displayat: 00 effect: storing.	toolpic_BitRect new title: ''toolpicnot'' in: (00 rect: 20120).		toolpic saveScreenBits."	self initmenu1]'BitRectEditor understands: 'leave	[[nilsaveActionPic[]		actionpic bitsFromString: saveActionPic.		saveActionPic _ nil.].		[nil saveToolPic[]		toolpic bitsFromString: saveToolPic.		saveToolPic_nil].	self writeToForm]'BitRectEditor understands: 'outside | pt 	[toolpic has: (pt_user mp)		[user redbug			[tool_tools bug: pt.			tool frame: frame; showon: actionbuttons.			tool editor_ self]]	actionpic has: pt		[user redbug			[tool setfrom: actionbuttons.			tool editor_ self]]	 super outside]'BitRectEditor understands: 'writeToForm	[ "Try writing in every case so can put in draw loop"	["dirty" true[picture saveScreenBits. dirty _ false]].	fontUnderEditnilfalse		[picture copyToForm: formUnderEdit at: 00.		fontUnderEdit charForm: characterIndex _ formUnderEdit].	 formUnderEditnilfalse		[picture copyToForm: formUnderEdit at: 00].	]'BitRectTool understands: 'block	[self getRectangle color: tone mode: mode.	editor writeToForm.	]'BitRectTool understands: 'blowup | smallRect bigRectFrame	[smallRect_self getRectangle.	[smallRect area < 100 [smallRect _ pencil frame]].	bigRectFrame _ Rectangle new origin: smallRect corner		extent: 44 + (smallRect  extent*blowupScale).	smallRect empty or bigRectFrame bitStringLength>16000		[pencil frame flash.  nil].	[user screenrect has: bigRectFrame corner[] 		bigRectFrame moveto: smallRect origin-bigRectFrame extent.		user screenrect has: bigRectFrame origin[]		"can''t find a space for blown up image"			pencil frame flash.  nil].	self blowup: smallRect to: bigRectFrame]'BitRectTool understands: 'blowup: smallRect to: bigRectFrame		| bigRect box pt i turt flag bits	[bits _ bigRectFrame bitsIntoString.	bigRect _ bigRectFrame inset: 22.	smallRect blowup: bigRect origin by: blowupScale.	turt_Turtle init.	box _ 00 rect: (blowupScale-1)(blowupScale-1).	"keep editing in blowup mode until the user presses a button		outside the big rect"	while flag do		[bigRect has: (pt _ user mp)			[box moveto: bigRect origin + (i _ pt-bigRect origin|blowupScale).			turt place: smallRect origin + (i/blowupScale).			user redbug[box color: black mode: storing. 				turt color: black; go: 0]			user yellowbug[box color: white mode: storing. 				turt color: white; go: 0]			user bluebug[bigRect flash]]				user anybug 			[(bigRect inset: (0-blowupScale) asPoint) has: pt[bigRect flash]			"quit" flag_false]		editor writeToForm].	bigRectFrame bitsFromString: bits.	user waitnobug]'BitRectTool understands: 'draw	[pencil color: tone; inking: mode; width: [penwidth  nil[2] penwidth].	pencil place: self mpOnGrid.	while user redbug do		[pencil goto: self mpOnGrid.		"editor writeToForm"].	editor writeToForm.	]'BitRectTool understands: 'editor_ ed 	[editor _ ed]'BitRectTool understands: 'frame [pencil frame]'BitRectTool understands: 'frame: f [pencil frame: f. pencil toDisplay]'BitRectTool understands: 'getRectangle | rect newrect start t   "rect must be in my frame"	["the rect-newrect stuff is so that the complementing stays		on for a while"	start_self mpOnGrid.	rect_newrect_(Rectangle new origin: start corner: start)		intersect: self frame.	"move the cursor slightly so that the user will notice the rectangle		being complemented"	user cursorloc_start+4.	while user anybug do		[rect_newrect.		rect comp.		t_self mpOnGrid.		newrect_(Rectangle new origin: (start min: t) corner: (start max: t))			intersect: self frame.		user displayFlush.		rect comp].	rect]'BitRectTool understands: 'init	[(pencil _ Turtle new) init; color: black; width: 2.	(brush _ BitRect new) title: ''brush'' in: (00 rect: 1616).	tone _ black. mode _ 0. grid _ 1. action _ draw]'BitRectTool understands: 'line | start end saveMode 	[start_end_self mpOnGrid.	saveMode _ pencil function.	pencil width: [penwidth  nil[2] penwidth]; color: black; inking: xoring.	while user redbug do		[end_self mpOnGrid.		pencil place: start; goto: end; place: start; goto: end].	pencil color: tone; inking: mode; place: start; goto: end.	editor writeToForm.	]'BitRectTool understands: 'mode	[ mode]'BitRectTool understands: 'mpOnGrid   "return mouse point rounded to grid"	[user mp+(grid/2) | grid]'BitRectTool understands: 'paint	[self brush: brush]'BitRectTool understands: 'redbug [self perform: action]'BitRectTool understands: 'setbrush | rect	[rect_self getRectangle.	rect empty or 5050<rect extent[pencil frame flash].	brush color: white mode: storing.	brush title: ''brush'' in: rect; saveScreenBits.	brush moveto: brushpt; show.	action _ paint]'BitRectTool understands: 'setfrom: butvec | pt	[butvec1 has: (pt _ user mp) 		[action _ butvec1 bug: pt]	butvec2 has: pt [tone _ butvec2 bug: pt.		tone=white [pencil color: white] pencil color: black]	butvec3 has: pt [mode _ butvec3 bug: pt]	butvec4 has: pt [penwidth _ (butvec4 bug: pt)]	butvec5 has: pt [grid _ butvec5 bug: pt]	]'BitRectTool understands: 'shade | p1 p2 a b t p r vs "down on redbug is black place.	up on redbug is white place.  Subsequent redbugs	paint a shade of gray depending on position between	black and white (and beyond white to black again).	Yellow or blue bug terminates."	[until user redbug do [p1 _ user mp]. "black"	until user nobug do [p2 _ user mp]. "white"	vs _ ( 1  1025  1089  585  4681  6731  22058  27031   26986  31191  32108   5160  5128  8321  1025 01 0).	r _ 00 rect: 1010.	b_(p1-p2). b _ b x asFloat  b y asFloat.	a _ b x * b x + (b y * b y) /16.0.	until (user yellowbug or user bluebug) do	[user redbug [p_user mp.		t _ b* (p-p2).		t _ (t x + t y /a) asInteger abs min: 16.		brush brush: p mode: mode color: vs(17-t)]	]	]'BitRectTool understands: 'showon: butvec	[butvec1 setvalue: action.	butvec2 setvalue: tone.	butvec3 setvalue: mode.	butvec4 setvalue: pencil width.	butvec5 setvalue: grid]'BitRectTool understands: 'tone	[ tone]'FaucetAnim understands: 'initSeq  | drip1 drip2 drip3  "FaucetAnim new initSeq. "	[	super initSeq. 	loc _ 50350.	faucet _ user asset: ''justFaucet.form''.	drip1 _ user asset: ''drops1.form''.	drip2 _ user asset: ''drops2.form''.	drip3 _ user asset: ''drops3.form''.	drips _ drip1, drip2, drip3.	]'FaucetAnim understands: 'resetSeq[super resetSeq.user restore.]'FaucetAnim understands: 'sequence	[count = 1 		[faucetWindow _ FormWindow new form: faucet.		faucetWindow frame: (loc extent: faucet extent).		faucetWindow title_ ''Faucet''; show.		dripsWindow _ AnimWindow new initLoc: loc + (16faucet extent y) frames: drips tickTime: 250.		dripsWindow title_ ''Drips''.		user schedule: faucetWindow.		user schedule: dripsWindow.		dripsWindow startTicking].	count = 2 		[dripsWindow stopTicking].	count > 2 		[loc _ faucetWindow frame origin.		user unschedule: faucetWindow.		user unschedule: dripsWindow.		self resetSeq. frame flash].	]'AnimWindow derstands: 'frames' unique.BitRectEditor classInit