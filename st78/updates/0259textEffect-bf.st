'Add text effect menu'ClassPane understands: 'selected 	[organizationPane class: Smalltalk  (list  selection).	organizationPane select: 1]' classified: 'as yet unclassified'CodePane understands: 'chooseEffect | choices choice	[choices _ (''default'' ''dst _ src'' ''dst or src'' ''dst xor src'' ''dst and src''		''dst _ ~src'' ''dst or ~src'' ''dst xor ~src'' ''dst and ~src'') copy.	choice _ [pared effect = 0  [1] (pared effect land: 7) + 2].	choiceschoice _ '' '' + (choiceschoice) + ''  ''.	choice _ (Menu new stringFromVector: choices) fbug.	choice = 0  []	pared style effect: [choice = 1  [0] choice-2 + 16].	pared show]'CodePane understands: 'classInit   "CodePane classInit."	[editmenu _ Menu new string: ''againcopycutpastedoitcompileundocanceleffectlineheightalignment'']' classified: 'as yet unclassified'CodePane understands: 'yellowbug	[editmenu bug		= 1  [pared again];		= 2  [pared copyselection];		= 3  [pared cut];		= 4  [pared paste];		= 5  [self doit];		= 6  [self compile];		= 7  [pared undo];		= 8  [self cancel];		= 10  [self chooseEffect];		= 11  [self chooseLineHeight];		= 12  [self chooseAlignment]]' classified: 'as yet unclassified'StyleSheet understands: 'effect: effect' classified: 'accessing'Textframe understands: 'effect	[style effect]' classified: 'accessing'Textframe understands: 'effect: effect	[style _ style copy.	style effect: effect]' classified: 'accessing'TextScanner understands: 'frame: f window: w para: p style: s printing: b	[frame _ f.	para _ p.	style _ s.	printing _ b.	super init.	self toDisplay.	function _ [style effect = 0  [oring] style effect land: 7].	exceptions _ defaultExceptions.	fontno _ 1.	para _ para asParagraph.	text _ para text.	NoteTaker  [self window: w]]' classified: 'as yet unclassified'TextScanner understands: 'scanline: line at: lineY stopx: sx stopchar: stopChar | nullChar xOfLastSpace stopCode emphasis runAndVal endOfRun padding relX tabsize spacePad alignment printSpace	[stopx _ sx.	chari _ line starti - 1.	spacecount _ line spaces.	padding _ line padwidth.	destx _ spacex _ xOfLastSpace _ frame minX.	spacePad _ charpad _ emphasis _ 0.	printSpace _ false.	[printing 		[function = 1  ["default, skipping quickly"]		(0 3 4 5 6) has: function  [ "we do want to print spaces"			color _ [(4 5 6) has: function  [black] white].			printSpace _ function]]].	tabsize _ style tabsize.	spacei _ 1.	alignment _ para alignment.	[alignment = 0 "left"  []	alignment = 1 "justify" 		[spacecount > 0 			[charpad _ padding / (line stopi - chari + spacecount).			[charpad > 0 				[padding _ padding - (charpad * (line stopi - chari - 2 - spacecount))]].			spacePad _ padding / spacecount.			spacecount _ spacecount - (padding \ spacecount)]]	alignment = 2 "center"  [destx _ destx + (padding / 2)]	alignment = 4 "right"  [destx _ destx + padding]].	stopCode _ 10.	until stopCode < 10 do		[stopCode = 10 			[stopCode _ 255.			chari  stopChar  [stopCode _ 3]			if printing then [self emphasize: emphasis leftx: xOfLastSpace rightx: destx liney: lineY].			xOfLastSpace _ destx.			chari _ chari + 1.			runAndVal _ para runAndVal: chari.			emphasis _ runAndVal2 land: 15.			endOfRun _ runAndVal1 + chari - 1 min: stopChar.			self setfont: (runAndVal2 lshift: 4) liney: lineY]		stopCode _ self scanword: endOfRun.		stopCode > 10 			[	[stopCode = 12  "space"					[spacecount _ spacecount - 1.					[spacecount = 0  [spacePad _ spacePad + 1]].					spacei _ chari.					spacex _ destx.					width _ spacesize + spacePad.					printSpace  [spacecount < 0  []						function _ [function = 6  [14] 12]. 						self callBLT. function _ printSpace]]				stopCode = 13  "tab"					[relX _ destx - frame minX.					width _ [para alignment > 0  [tabsize + charpad]							relX + tabsize | tabsize - relX]]				stopCode = 11  "no glyph"					[nullChar _ maxascii + 1.					sourcex _ xtable(nullChar + 1).					width _ xtable(nullChar + 2) - sourcex.					if printing then [self callBLT].					width _ width + charpad]].			destx _ destx + width.			destx > stopx  [stopCode _ 2]			chari  endOfRun  [stopCode _ 10]			chari _ chari + 1]		stopCode = 4  [width _ 0]].	printing  [self emphasize: emphasis leftx: xOfLastSpace rightx: destx liney: lineY]]' classified: 'as yet unclassified'CodePane classInit