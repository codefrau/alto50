'Support for compile all and class fileout'Class understands: 'code: t1 	[[t1  lastSelector and self  lastClass  []	lastParagraph _ ([t1 = ClassOrganization  [self organization]			(messagedict code: t1)  nil  [self decompile: t1]			messagedict code: t1]) asParagraph makeBoldPattern.	lastClass _ self.	lastSelector _ t1].	lastParagraph]' classified: 'As yet unclassified'Class understands: 'compileall | t1 t2  	[for t1 from: messagedict contents do		[(numArgs:numTemps:numStack:literals:primitive:bytes: error ) has: t1  []		user fileString: ''progress'' _ title + ''>>'' + t1.		t2 _ self code: t1.		self understands: t2 asParagraph].	false and self  Object  [nil installError]	Changes init.	MessageDict new freeMethods]' classified: 'As yet unclassified'Class understands: 'compileFrom: t1 to: t2 | t3 t4  	[for t3 from: messagedict contents sort do		[t3 < t1 or t3 > t2  []		user fileString: ''progress'' _ title + ''>>'' + t3.		t4 _ self code: t3.		self understands: t4 asParagraph].	false and self  Object  [nil installError]	Changes init.	MessageDict new freeMethods]' classified: 'As yet unclassified'Class understands: 'filout | strm  "InspectWindow filout"	[strm _ Stream default.	self filoutOn: strm.	user fileString: self title + ''.st'' _ strm contents]' classified: 'As yet unclassified'Class understands: 'filoutOn: strm | sel	[self printdefon: strm.	strm next_ 30; cr; cr.	for sel from: self selectors do		[self printMethod: sel on: strm.		strm next_ 30; cr; cr].	self selectors has: classInit 		[strm append: self title; space; append: classInit + ''.''.		strm next_ 30; cr; cr]]' classified: 'As yet unclassified'Class understands: 'install: sel method: method literals: lits code: code backpointers: bps 	["If merging, do not install unless decompiles match..."	"(MergingSourcestrue and: (messagedict has: sel))		and (Decompiler new decompile: sel class: self)  (Decompiler new decompile: sel withMethod: method class: self)  []"	messagedict _ messagedict insert: sel method: method literals: lits code: code backpointers: bps.	lastClass _ self.	lastSelector _ sel.	lastParagraph _ code.	Changes insert: title + '' '' + sel]' classified: 'As yet unclassified'Class understands: 'messages 	[messagedict contents]' classified: 'As yet unclassified'Class understands: 'removeFromChanges | s	[for s from: Changes contents do		[(s asStream upto: '' ''1) = self title  [Changes delete: s]]]' classified: 'As yet unclassified'MessageDict understands: 'code 	[[code  nil  [code _ Vector new: methods length]].	code]' classified: 'As yet unclassified'MessageDict understands: 'code: t1 	[self code  (self findorerror: t1)]' classified: 'As yet unclassified'MessageDict understands: 'code: t1 _ t2 	[self code  (self findorerror: t1) _ t2]' classified: 'As yet unclassified'MessageDict understands: 'insert: t1 method: t2 literals: t3 code: t4 backpointers: t5 | t6 t7	[t6 _ self find: t1.	t6 		[self freeMethod: methods  t6.		methods  t6 _ t2.		self code  t6 _ t4]	t7 _ [self sparse  [self]			self growto: methods length * 2].	t7 objects  (t7 findornil: t1) _ t1.	t7 insert: t1 method: t2 literals: t3 code: t4 backpointers: t5]' classified: 'As yet unclassified'UserView understands: 'compileAllFrom: t1 to: t2 | t3  	[for t3 from: user classNames do		[t3 < t1 or t3 > t2  []		t3  CompiledMethod  []		(Smalltalk  t3) compileall]]' classified: 'As yet unclassified'MessageDict understands: 'growto: t1 | t2 t3 t4  	[t3 _ MessageDict new init: t1.	for t2 from: self do		[t4 _ self findorerror: t2.		t3 _ t3 insert: t2 method: methods  t4 literals: [literals  nil  [nil]				literals  t4] code:  self code  t4 backpointers: nil].	t3]' classified: 'As yet unclassified'