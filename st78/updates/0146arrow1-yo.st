Class new title: ArrowWindow	subclassof: Window	fields: ''	declare: 'CrossHairCursor ';	classified: 'Windows'ArrowWindow understands: 'beginPoint | p	[ self style: beginPoint]'ArrowWindow understands: 'clearCursor	[CrossHairCursor _ nil]'ArrowWindow understands: 'crossHairCursor 	[CrossHairCursor  nil  [CrossHairCursor]	CrossHairCursor _ (Cursor new fromtext: ''0000000000000000000000100100000000000010010000000000001001000000000000100100000000000010010000000111110000111110000000000000000000000000000000000111110000111110000000100100000000000010010000000000001001000000000000100100000000000010010000000000000000000000'' offset: 0  0).	CrossHairCursor]'ArrowWindow understands: 'default	[self frame: Rectangle new fromuser.	self style: beginPoint _ frame origin.	self style: endPoint _ frame corner.	self style: hasHead _ true.	self show]'ArrowWindow understands: 'draw	[self draw: xoring]'ArrowWindow understands: 'draw: function | t	[t _ Turtle init.		[nil  function  [t function_ function]].	t width: (self style: borderWidth).	t color: (self style: borderColor).	t color: black.	t place: self beginPoint.	t goto: self endPoint.	self hasHead  [		t up.		t turn: ((self theta: (self endPoint - self beginPoint)) / 3.1415926 * 180.0) + 90.		t turn: 135.		t go: 20.		t penup.		t turn: 180.		t go: 20.		t pendn.		t turn: 45.		t turn: 135 negated.		t go: 20]]'ArrowWindow understands: 'eachtime | p origin sel moved	[origin _ frame origin.	[frame has: user mp 		[for sel from: (beginPoint endPoint) do [			moved _ false.			[((user mp dist: (self perform: sel)) < 16)  [				self crossHairCursor showwhile [					while (((user mp dist: (self perform: sel)) < 16) and [moved  true]) do [						while user redbug do [							p _ user mp.							[((self perform: sel)  p)  [								moved _ true.								self undraw.								style  sel _ p.								self undraw]]]]].				[moved  [					self frame: (Rectangle new encompass: self beginPoint, self endPoint)]]]]]]].	user yellowbug  [ self yellowbug]	user	bluebug  [ self bluebug].	 false]'ArrowWindow understands: 'endPoint | p	[ self style: endPoint]'ArrowWindow understands: 'enter'ArrowWindow understands: 'hasHead | p	[ self style: hasHead]'ArrowWindow understands: 'show	[self draw]'ArrowWindow understands: 'theta: p | x y theta tan 	[x _ p x.	y _ p y.	[x = 0 		[y  0  [1.5707963]		true  [4.712389]]].	tan _ y asFloat / x asFloat.	theta _ tan arctan.	[x  0 		[y  0  [theta]		true  [ 6.2831853 + theta]]].	true  [ 3.1415927 + theta]]'ArrowWindow understands: 'undraw	[self draw: xoring]'CodePane understands: 'enter	[(self style: noTitle)		and ((frame has: pared frame origin)				and pared height  frame height)  []	scrollBar show]'Rectangle understands: 'encompass: ps | topLeft bottomRight i p	[for i to: ps length do [		p _ ps  i.		[topLeft  nil  [			topLeft _ p.			bottomRight _ p]	 	true  [			topLeft _ topLeft min: p.			bottomRight _ bottomRight max: p]]].	corner _ bottomRight.	origin _ topLeft.	 self]'UserView understands: 'bugScreenMenu | m w turtle i f index file	[m _ 0.	screenMenu bug	= (m_m+1)  [projectWindow runParent];	= (m_m+1)  [projectSequencer visitNext];	= (m_m+1)  [self restore];	= (m_m+1)  [self schedule: ProjectWindow init];	= (m_m+1)  [self schedule: ProjectSorter init];	= (m_m+1)  [self schedule: BrowseWindow default];	= (m_m+1)  [self schedule: (CodeWindow new class: UserView selector: workspace para: (UserView code: workspace) formerly: false)];	= (m_m+1)  [w _ self loadFormWindow  [self schedule: w enter]];	= (m_m+1)  [user schedule: (ArrowWindow new default)];	= (m_m+1)  [self schedule: (D1TopWindow new default)];	= (m_m+1) 		[turtle _ Turtle init.		turtle color: black; width: 4; inking: oring.		for i to: 50 do [turtle go: i * 4; turn: 89]];	= (m_m+1) 		[f _ self fileMenu: ''edit'' directory: '''' matching: ''*''			 [self editFile: f]];	= (m_m+1) 		[f _ self fileMenu: ''file in'' directory: '''' matching: ''*.st''			 [self filin: f]];	= (m_m+1) 		[f _ self fileMenu: ''file delete'' directory: '''' matching: ''*''			 [self confirm: ''Really delete '' + f  [self fileString: f _ nil]]];		= (m_m+1) 		[f _ self fileMenu: ''publish'' directory: '''' matching: ''*.st''			 [file _ self fileString: f.			self fileString: (self update: f _ file) _ file.			self fileString: f _ nil]];	= (m_m+1)  [self loadUpdates];	= (m_m+1)  [user save]]'UserView understands: 'classInit 	[screenMenu _ Menu new string:''go to parent projectgo to next projectrestore displayopen a projectopen a project sorteropen a browseropen a workspaceopen form ...create an arrowtablet demoturtle demoedit file ...file in ...delete file ...publish update ...load updatessave'']'UserView classInit