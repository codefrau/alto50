'Indent/outdent selection by tab/shift-tab'TextImage understands: 'cursorBackward var to block shift: shift	[[c1 = c2  [begintypein _ false]].	self unselect.	[shift 		[[c1 = c2  [begintypein _ c2]].		begintypein = c2 			[var value_ c1. c1 _ block eval max: 1]		var value_ c2. c2 _ block eval max: 1.		c1 _ c1 min: c2].	"no shift"		[c1 = c2  [var value_ c1. c1 _ block eval max: 1]].		c2 _ c1].	self selectAndScroll]'TextImage understands: 'cursorForward var to block shift: shift	[[c1 = c2  [begintypein _ false]].	self unselect.	[shift 		[[c1 = c2  [begintypein _ c1]].		begintypein = c1 			[var value_ c2. c2 _ block eval min: para length + 1]		var value_ c1. c1 _ block eval min: para length + 1.		c2 _ c2 max: c1].	"no shift"		[c1 = c2  [var value_ c2. c2 _ block eval min: para length + 1]].		c1 _ c2].	self selectAndScroll]'TextImage understands: 'indent: outdent| indent old new c	[indent _ outdent  false.	self unselect.	while (c1 > 1 and para(c1-1)  cr) do [c1 _ c1 - 1].	while (c2  para length and parac2  cr) do [c2 _ c2 + 1].	old _ self selectionAsStream.	new _ Stream default.	until old end do [		[indent  [new tab]].			c _ old next. "first char in line"		[outdent and c = tab  [c _ old next]].		while (c and c  cr) do [			new next_ c. c _ old next].		c  [new next_ c]]. "last char in line"	self replace: new contents.	self complement]'TextImage understands: 'kbd | typed key del shift c	"For typing speed this processes all the keys already queued.	It returns when the queue is empty, or a special key was processed"	[c1 < c2 and self checklooks  []	typed _ Set new string: 16.	[begintypein  []	del _ Deletion.	Deletion _ self selection.	begintypein _ c1].	while [key _ user kbdnext. shift _ user shiftKey.	key] do		[key = bs 			[c1 < c2  [] "deleting selection happens below"			typed empty 				[c1 _ 1 max: c1 - 1.				begintypein _ begintypein min: c1]			typed skip: 1]		key = cut  [self copyselection] "because mapped to cmd-c"		key = paste 			[self replace: typed.			begintypein _ c1 _ c2.			self paste]		key = ctlw 			[ [typed empty  [] self replace: typed. typed reset. c1 _ c2].			c1 _ 1 max: c1 - 1.			while (c1 > 1 and (para  (c1 - 1)) tokenish) do				[c1 _ c1 - 1].			begintypein _ begintypein min: c1]		key = esc 			[ [typed empty  [] self replace: typed. typed reset. c1 _ c2].			self fintype.			c1 _ c2 - Scrap length.			self complement]		key = 167  "doit prompt"			[typed next_ 20; space]		key = all 			[[typed empty  [] self replace: typed].			self unselect. begintypein _ c1 _ 1. c2 _ para length + 1.			self select]		key = again 			[[typed empty  [] self replace: typed].			[begintypein = c1  [begintypein _ false. Deletion _ del]].			self again]		key = undo 			[self undo]		key = tab 			[c1 = c2  [typed next_ key]			self indent: user shiftKey]		key = left 			[[typed empty  [] self replace: typed].			self cursorBackward c to c - 1 shift: shift]		key = right 			[[typed empty  [] self replace: typed].			self cursorForward c to c + 1 shift: shift].		key = up 			[[typed empty  [] self replace: typed].			self cursorBackward c to (self charofpt: (self pointofchar: c) - (0self lineheight)) shift: shift]		key = down 			[[typed empty  [] self replace: typed].			self cursorForward c to (self charofpt: (self pointofchar: c) + (0self lineheight)) shift: shift]		key = pageup 			[[typed empty  [] self replace: typed].			self cursorBackward c to (self charofpt: (self pointofchar: c) - (0window height)) shift: shift]		key = pagedown 			[[typed empty  [] self replace: typed].			self cursorForward c to (self charofpt: (self pointofchar: c) + (0window height)) shift: shift]		key = home 			[[typed empty  [] self replace: typed].			self cursorBackward c to [while (c > 1 and para(c-1)  cr) do [c _ c - 1]. c] shift: shift]		key = end 			[[typed empty  [] self replace: typed].			self cursorForward c to [while (c  para length and parac  cr) do [c _ c + 1]. c] shift: shift]		typed next_ key].	self replace: typed.	c1 _ c2.	self selectAndScroll]'UserView understands: 'loadFormWindow| f index file form window	[f _ self fileMenu: ''form load'' directory: assetURL matching: ''*.form''.	f  false  [false]	file _ user fileString: f.	form _ Form new fromInstance: file asStream.	window _ FormWindow new.	window title_ (f copy: assetURL length + 1 to: f length - 5).	window initForm: form.	window]'