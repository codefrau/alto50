Decompiler understands: 'decompile: selector class: class 	[ self decompile: selector		withMethod: (class method: selector)		class: class]'Decompiler understands: 'decompile: selector withMethod: meth class: class | strm block pc primNo startPC nTemps 	[method _ meth.	method length < [NoteTaker  [3]	8]  [self quickCode: selector class: class]	[NoteTaker 		[literals _ method literals.		primNo _ method primitive.		startPC _ method initialPC - 1.		nTemps _ method numArgs + method numTemps]	literals _ MessageDict new literalsIn: method.	primNo _ method  2.	startPC _ method  6.	nTemps _ method  5].	temps _ Vector new: nTemps.	self initSymbols: class.	stack _ (Vector new: 10) asStream.	block _ self block: startPC + 1 to: method length pc [pc] hasValue [pc].	stack empty  false  [user notify: ''stack not empty'']	self convertMacros: block sel: selector.	strm _ Stream default.	self printPattern: selector on: strm.	strm crtab: 1.	block printon: strm indent: 1 precedence: 0 forValue: false decompiler: self.	[primNo  0 		[strm append: '' primitive: ''.		strm print: primNo]].	strm contents asParagraph makeBoldPattern]'ProcessFrame understands: 'arguments |  nargs arguments offset i   	[nargs _ self nargs.	arguments _ Vector new: nargs.	offset _ bp + dOffsetArgs + nargs.	for i to: nargs do		[arguments  i _ process  (offset - i)].	 arguments]'ProcessFrame understands: 'message | method t2 	[self hasCaller 		[method _ process  (self callerBP + dOffsetMethod).		method messageAt: self callerPC]	XXnoCallerXX]'ProcessFrame understands: 'printon: strm	[self hasCaller 		[strm append: self mclass title.		[self receiver is: self mclass  []			strm append: ''('' + self receiver class title + '')''].		strm append: '' <= ''.		strm print: self message]	" Root method - maybe search for method in class..."	strm append: self receiver class title + '' <= '' + ''root method''.	]'ProcessFrame understands: 'stack | strm this 	["Returns a vector of processFrames from here to the root."	strm _ Stream new of: (Vector new: 20).	this _ self.	strm next_ self.	while this hasCaller do		[this _ this caller.		strm next_ this].	strm contents]'ProcessFrame understands: 'tempframe	[ self arguments concat: self temps]'ProcessFrame understands: 'temps |  ntemps temps offset i   	[ntemps _ self method numTemps.	temps _ Vector new: ntemps.	offset _ bp + dOffsetTemps + 1.	for i to: ntemps do		[temps  i _ process  (offset - i)].	temps]'StackPane understands: 'code | mclass selector method		"code of my selected context"	[mclass _ (list  selection) mclass.	selector _ self selector.	mclass canunderstand: selector  [ mclass code: selector].	method _ (list  selection) method.	selector _ (doit doit: doit:with: doit:with:with: doit:with:with:with:)(method numArgs + 1).	 Decompiler new decompile: doit		withMethod: (list  selection) method		class: mclass]'StackPane understands: 'selector | ctxt 	[ctxt _ list  (selection max: 1).	[ctxt sender  nil  [false]	ctxt message]]'StackPaneNT understands: 'processFrame: topFrame 	[self context: false instance: false code: false.	self interrupt: false.	self of: topFrame inVector]'UserView understands: 'notifyNT: t1 | t2 	[NotifyFlag 		[t2 _ NotifyWindowNT new.		t2 title: t1 processFrame: thisContext current caller.		NormalCursor topage1.		self schedule: t2.		self run: true]	self clearshow: t1.	self cr.	self show: ''ctl-d to restart''.	self ev.	thisContext restart]'ProcessFrame derstands: 'bpCaller' unique.