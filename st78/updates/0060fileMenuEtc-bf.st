'Refactor fileMenu. FormWindow keeps file name. user  windowTitle'UserView understands: ' windowTitle | window	[for window from: user sched do		[windowTitle = window title  [window]].	false]' classified: 'As yet unclassified'UserView understands: 'bugScreenMenu | choice w turtle i f index  	[choice _ (Menu new string:''exit to overviewrestore displayopen a subviewopen a browseropen a workspaceopen form ...tablet demoturtle demoedit file ...file in ...publish update ...load updatessave'') bug.	choice = 1 		[projectWindow  nil  []		projectWindow runParent]	choice = 2  [self restore]	choice = 3  [self schedule: ProjectWindow init]	choice = 4  [self schedule: BrowseWindow default]	choice = 5  [self schedule: (CodeWindow new class: UserView selector: workspace para: (UserView code: workspace) formerly: false)]	choice = 6  [w _ self loadFormWindow  [self schedule: w]]	choice = 7  [self schedule: (D1TopWindow new default)]	choice = 8 		[turtle _ Turtle init.		turtle color: black; width: 4; inking: oring.		for i to: 50 do [turtle go: i * 4; turn: 89]]	choice = 9 		[f _ self fileMenu: ''edit'' directory: '''' matching: ''*''			 [self editFile: f]]	choice = 10 		[f _ self fileMenu: ''file in'' directory: '''' matching: ''*.st''			 [self filin: f]]	choice = 11 		[f _ self fileMenu: ''publish'' directory: '''' matching: ''*.st''			 [self update: f _ (self fileString: f)]]	choice = 12  [self loadUpdates]	choice = 13 		[NoteTaker  [user save]		user quit]]' classified: 'As yet unclassified'UserView understands: 'fileMenu: label directory: directory matching: match | fileNames index 	[fileNames _ user fileStrings: directory matching: match.	index _ (Menu new stringFromVector: fileNames , ('' cancel '' + label + '' '')) zbug.	index > fileNames length  [false]	fileNames  index]' classified: 'As yet unclassified'UserView understands: 'fileStrings	[self fileStrings: '''']' classified: 'As yet unclassified'UserView understands: 'fileStrings: directory	[[directory length = 0  []	directory last  (''/''  1)  [directory _ directory + ''/'']].	self fileString: directory]' classified: 'As yet unclassified'UserView understands: 'fileStrings: directory matching: match | fileNames f 	[match  1  (''*''  1)  [self error: ''match not supported'']	match _ match copy: 2 to: match length.	(self fileStrings: directory) all f suchThat		(f copy: (f length - match length + 1 max: 1) to: f length) = match]' classified: 'As yet unclassified'UserView understands: 'loadFormWindow| f index file form window	[f _ self fileMenu: ''form load'' directory: assetURL matching: ''*.form''.	f  false  [false]	file _ user fileString: assetURL + f.	form _ Form new fromInstance: file asStream.	window _ FormWindow new form: form.	window title_ (f copy: 1 to: f length - 5).	window]' classified: 'As yet unclassified'Window understands: 'title 	[titlepara  nil  [''Untitled''].	titlepara text]' classified: 'As yet unclassified'Window understands: 'title_ aTitle	[titlepara _ aTitle asParagraph]' classified: 'As yet unclassified'UserView derstands: loadForm.