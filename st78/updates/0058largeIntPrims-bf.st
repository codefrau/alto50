'Use new largeInt primitives for essential ops'Integer understands: '+ other | otherint 	[other is: Integer  [self asLarge + other]	otherint _ other asInteger.	otherint isLarge  [self asLarge + other]	self + otherint] primitive: 210' classified: 'As yet unclassified'Integer understands: '- other | otherint 	[other is: Integer  [self asLarge - other]	otherint _ other asInteger.	otherint isLarge  [self asLarge - other]	self - otherint] primitive: 211' classified: 'As yet unclassified'LargeInteger understands: '+ other | otherneg result 	[otherneg _ other neg.	neg  otherneg 		[result _ bytes natadd: other bytes.		LargeInteger new bytes: result neg: neg]	result _ bytes natsubtract: other bytes.	neg  [result negate]	result] primitive: 210' classified: 'As yet unclassified'LargeInteger understands: '- other | otherneg result 	[otherneg _ other neg.	neg  otherneg 		[result _ bytes natsubtract: other bytes.		neg  [result neg_ result neg  false]		result]	result _ bytes natadd: other bytes.	LargeInteger new bytes: result neg: neg] primitive: 211' classified: 'As yet unclassified'LargeInteger understands: 'compare: other	[((bytes length = 1 and bytes  1 = 0) and other bytes length = 1) and other bytes  1 = 0  [2]	neg 		[other neg  [other bytes natcompare: bytes]		1]	other neg  [3]	bytes natcompare: other bytes] primitive: 214' classified: 'As yet unclassified'