'Easier typing for funny chars. Try :: .. =>  ==  ~=  >=  <= -- ## <) @@ ^^ __'TextImage understands: 'kbdSubstitute: key in: typed | prev subst first second replacement	[c1  c2 or c1 = begintypein  [false]	prev _ [typed empty  [c1  1  [false] para(c1-1)] typed last].	subst _ ''=>==~=!=--..::>=<=#@<)^__'' asStream.	until subst end do [		first _ subst next.		second _ subst next.		replacement _ subst next.		first = prev and second = key 			[if typed empty then [c1 _ c1 - 1] else [typed skip:1].			typed next _ replacement.			true]]	false]'TextImage understands: 'kbd | typed key del shift c	"For typing speed this processes all the keys already queued.	It returns when the queue is empty, or a special key was processed"	[c1 < c2 and self checklooks  []	typed _ Set new string: 16.	[begintypein  []	del _ Deletion.	Deletion _ self selection.	begintypein _ c1].	while [key _ user kbdnext. shift _ user shiftKey.	key] do		[self kbdSubstitute: key in: typed  []		key = bs 			[c1 < c2  [] "deleting selection happens below"			typed empty 				[c1 _ 1 max: c1 - 1.				begintypein _ begintypein min: c1]			typed skip: 1]		key = cut  [self copyselection] "because mapped to cmd-c"		key = paste 			[self replace: typed.			begintypein _ c1 _ c2.			self paste]		key = ctlw 			[ [typed empty  [] self replace: typed. typed reset. c1 _ c2].			c1 _ 1 max: c1 - 1.			while (c1 > 1 and (para  (c1 - 1)) tokenish) do				[c1 _ c1 - 1].			begintypein _ begintypein min: c1]		key = esc 			[ [typed empty  [] self replace: typed. typed reset. c1 _ c2].			self fintype.			c1 _ c2 - Scrap length.			self complement]		key = 167  "doit prompt"			[typed next_ 20; space]		key = all 			[[typed empty  [] self replace: typed].			self unselect. begintypein _ c1 _ 1. c2 _ para length + 1.			self select]		key = again 			[[typed empty  [] self replace: typed].			[begintypein = c1  [begintypein _ false. Deletion _ del]].			self again]		key = undo 			[self undo]		key = tab 			[c1 = c2  [typed next_ key]			self indent: user shiftKey]		key = left 			[[typed empty  [] self replace: typed].			self cursorBackward c to c - 1 shift: shift]		key = right 			[[typed empty  [] self replace: typed].			self cursorForward c to c + 1 shift: shift].		key = up 			[[typed empty  [] self replace: typed].			self cursorBackward c to (self charofpt: (self pointofchar: c) - (0self lineheight)) shift: shift]		key = down 			[[typed empty  [] self replace: typed].			self cursorForward c to (self charofpt: (self pointofchar: c) + (0self lineheight)) shift: shift]		key = pageup 			[[typed empty  [] self replace: typed].			self cursorBackward c to (self charofpt: (self pointofchar: c) - (0window height)) shift: shift]		key = pagedown 			[[typed empty  [] self replace: typed].			self cursorForward c to (self charofpt: (self pointofchar: c) + (0window height)) shift: shift]		key = home 			[[typed empty  [] self replace: typed].			self cursorBackward c to [while (c > 1 and para(c-1)  cr) do [c _ c - 1]. c] shift: shift]		key = end 			[[typed empty  [] self replace: typed].			self cursorForward c to [while (c  para length and parac  cr) do [c _ c + 1]. c] shift: shift]		typed next_ key].	self replace: typed.	c1 _ c2.	self selectAndScroll]'