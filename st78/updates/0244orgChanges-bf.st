'Record reorganizations in Changes and file them out automatically'Class understands: 'noChanges |  chg plusName className barName tildaName prefix	[className _ self title.	plusName _ ''+'' + className.	barName _ ''|'' + className.	tildaName _ ''~'' + className.	for chg from: Changes contents do		[prefix _ chg asStream upto: '' ''  1.		prefix = className [Changes delete: chg]		prefix = plusName [Changes delete: chg]		prefix = barName [Changes delete: chg]		prefix = tildaName [Changes delete: chg]	]]' classified: 'sources, change log'Class understands: 'organizationChanged | log	[Changes insert: ''|'' + title + '' organization''.	user changeLog log do [self printOrgOn: log]]' classified: 'organization'Class understands: 'printOrgOn: strm |  	[strm append: self title + '' organization fromParagraph:''.	strm cr; print: self organization asParagraph text;		append: '' asParagraph for: ''; append: self title; cr]' classified: 'fileIn/Out'ClassOrganizer understands: 'classInit   "ClassOrganizer classInit."	[default _ ''As yet unclassified''.	self canunderstand: restore 		[self restore. self class derstands: restore].	]'ClassOrganizer understands: 'fromParagraph: para | t i j g	[user displayoffwhile	[t _ para asVector.	self globalComment _ t1.	commentVector _ Vector new: t length-1.	groupVector _ Vector new: t length-1.	for i to: t length-1 do		[g _ t(i+1).		commentVectori _ g1.		until 0=(j_ g find: _) do		"reconstitute _ suffixes"			[g _ g replace: j-1 to: j by: (g(j-1)+''_'') unique inVector]		groupVectori _ (g copy: 2 to: g length) sort]	]]'ClassOrganizer understands: 'fromParagraph: para for: class	[self fromParagraph: para.	class organizationChanged]'ClassOrganizer understands: 'init: sortedVec	[self globalComment _ ''This class has not yet been commented''.	commentVector _ ''As yet unclassified'' inVector.	groupVector _ sortedVec inVector]' classified: 'private'OrganizationPane understands: 'compile: parag | sel cat	[classnil or selection1 [classPane compile: parag] "new definition"	selection=2 [class organization fromParagraph: parag for: class. self class: class] "new organization"	cat _ [selection=0 [''As yet unclassified''] listselection].	sel _ selectorPane compile: parag in: class under: cat		[self revise: (self listFor: class) with: cat.		selection0 [selectorPane revise: (class organization category: cat) with: sel]]	false]' classified: 'creating method dictionary'UserView understands: 'filoutChanges: chgs on: strm | class sel org forget spec className postscript	[chgs empty  [chgs]	postscript _ Stream default.	chgs _ chgs asStream.	until chgs end do		[spec _ chgs next.		user cr; show: spec.		spec _ spec asStream.		[spec peekFor: ''+''    "Class def"			[className _ spec rest unique.			SmalltalkclassName printdefon: strm].		org _ spec peekFor: ''|''. "Reorganization"		forget _ spec peekFor: ''~''.  "Method removal"		class _ Smalltalk  (spec upto: 32) unique.		org [class printOrgOn: strm]		sel _ (spec upto: 32) unique.		forget [class printForget: sel on: strm]		class printMethod: sel on: strm.		sel = classInit  [postscript append: class title; space; append: sel; cr; next_ 30; cr]].		strm next_ 30; cr].	strm append: postscript contents]' classified: 'as yet unclassified'Class organization fromParagraph:'''This class has not yet been commented''(''As yet unclassified'' abstract bytesize: category: classified: clean code: compileall compileFrom:to: describe:on: ed: edit: edit:para:formerly: execute: fixSubClassesOf: fromFreelist:fill: initClass install:method:literals:code:backpointers: instfield: invertRef: Isa: moveFromCat:to: print:on: printon: realself recopy: shrink space subclassof: title:insystem: title:subclassof:fields:declare: veryspecial: wholeEnvironment whosends: )(''compiler access'' notify:at:in: )(''initialize-release'' classInit declare: obsolete sharing: )(''organization'' category organization organizationChanged )(''class name'' rename: )(''copying'' copy: copy:from: copy:from:classified: )(''instance creation'' default fromuser init init: new new: )(''sources, change log'' noChanges )(''creating method dictionary'' decompile: )(''testing method dictionary'' canUnderstand: )(''fileIn/Out'' filout filoutOn: printdefon: printForget:on: printMethod:on: printOrgOn: )(''access'' definition environment environment_ fieldNamesInto: fields: fieldsString instsize instvars myinstvars_ title title: )(''accessing class hierarchy'' superclass )(''accessing instances and variables''  _ allInstances classvars declareString howMany )(''accessing method dictionary'' canunderstand: derstands: forget: md messages method: selectors understands: understands:classified: )' asParagraph for: ClassClass derstands: 'filoutOrg' unique.Class derstands: 'filoutOrgOn:' unique.ClassOrganizer classInit