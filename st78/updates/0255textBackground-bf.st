'Support background fill in text / workspace'Class understands: 'title: nm subclassof: sup fields: fieldNames declare: classVarNames | className log	[className _ nm unique.	className  1  (className  1) asUppercase 		[user notify: ''Please capitalize each word in class title: '' + className.		false]	WaitCursor showwhile [		self title: className.		self subclassof: sup.		self fields: fieldNames.		self declare: classVarNames].	Changes insert: ''+'' + className.	user changeLog log do [(SmalltalkclassName) printdefon: log]]'| instances n cls inst.Textframe instvars has: 'bg'  [].instances _ Dictionary new: 20.for n from: user classNames do	[cls _ Smalltalkn.	cls  Textframe or (cls Isa: Textframe)		 [instances insert: n with: cls allInstances]].Class new title: Textframe	subclassof: Object	fields: 'frame window para style lines lastline bg'	declare: 'tab cr space ';	classified: 'Text Objects'.Textframe understands: 'bg_ bg'.for n from: instances do [	for inst from: instancesn do [		user cr; show: 'Fixing ' + inst asString.		inst become: (Smalltalkn copy: inst).		inst bg_ white]].CodePane understands: 'style: attr _ value	[super style: attr _ value.	attr = fill  [pared bg _ value]]'Textframe understands: 'bg_ bg'Textframe understands: 'clearfrom: t1 	[((frame origin x  t1 rect: frame corner) intersect: window) clear: bg]'Textframe understands: 'displaylines: first to: last | rect a d h scanner y i line	[first _ first max: (self lineofy: window minY).	last _ last min: (self lineofy: window maxY).	rect _ window minX(self yofline: first) rect: window maxX((self yofline: last) + style lineheight).	if style linelead < 0 then		"render additional lines if they overlap"		[self maxAscent a andDescent d.		h _ a - style baseline max: style baseline + d - style lineheight.		first _ first - (h / style lineheight + 2) max: 1.		last _ last + (h / style lineheight + 2) min: lastline.		rect origin y _ rect origin y - h.		rect corner y _ rect corner y + h - style lineheight].	(rect intersect: window) clear: bg.	scanner _ self printer: true.	y _ self yofline: first.	for i from: first to: last do		[line _ lines  i.		scanner scanline: line at: y stopx: window maxX stopchar: line stopi.		y _ y + style lineheight].	y]'Textframe understands: 'frame: t1 window: t2 para: t3 style: t4 	[frame _ t1.	window _ t2.	para _ t3.	style _ t4.	[NoteTaker or frame  nil  []	window _ frame intersect: user screenrect.	frame _ window].	lines _ Vector new: 32.	lastline _ 0.	bg _ white.	para  nil or frame  nil  []	self measureall]'