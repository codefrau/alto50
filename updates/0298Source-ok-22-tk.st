Array understands: 'has: x [(self find: x)0]' classified: falseClassPane understands: 'close	[systemPane _ nil. super close]' classified: falseClassPane understands: 'deselected	["I just lost my selection.  Tell organizationPane to display nothing."	organizationPane class: nil.]' classified: falseClassPane understands: 'from: systemPane to: organizationPane' classified: falseCodePane understands: 'selectRange: r [pared selectRange: r; selectAndScroll]' classified: falseDictionary understands: 'invert: obj | i	[for i to: values length do		[valuesi=obj [objectsi]]	false]' classified: falseDictionary understands: 'rehash | i copy	[copy _ Dictionary new init: self size.	"create a copy"	for i to: objects length do		[objectsinil[]		 copy insert: objectsi with: valuesi]	"hash each entry into it"	self copyfrom: copy]' classified: falseDispframe understands: 'init	[text _ Textframe new.	self of: (String new: 16)]' classified: falseForm understands: '	fromuser  | r	["create a new Form whose rectangle is specified by the user. "	r _ Rectangle new fromuser.	self extent: r extent.	bits_ r bitsIntoString	]' classified: falseForm understands: 'ground: ground 	["change the ground color (color associated with white) for this Image"]' classified: falseForm understands: 'length [  bits length]' classified: falseGenerator understands: 'comment: s"Class fieldNamesInto"' classified: falseGenerator understands: 'contents"Class fieldNamesInto"' classified: falseGenerator understands: 'trailer: s"Class fieldNamesInto"' classified: falseInspectWindow understands: 'comment: s		"called by of: via Class fieldNamesInto"' classified: falseInspectWindow understands: 'contents	"called by of: via Class fieldNamesInto"' classified: falseInspectWindow understands: 'trailer: s	"called by of: via Class fieldNamesInto"' classified: falseInteger understands: 'neg	["behave like a LargeInteger"	(self < 0)[true]false]' classified: falseLargeInteger understands: 'allmask: b [b = (self land: b)]' classified: falseLargeInteger understands: 'anymask: b [0  (self land: b)]' classified: falseLargeInteger understands: 'printon: strm base: b	[[neg  [strm append: '''']].	bytes printon: strm base: b]' classified: falseListPane understands: 'close "Zero my selection so it wont be grayed when I close.  Break cycles."	[selection_0. scrollBar close]' classified: falseListPane understands: 'lasttime	[self leave]' classified: falseListPane understands: 'yellowbug	[window flash]' classified: falseMenu understands: 'clear	[frame clear]' classified: falseMessageDict understands: 'invert: method | i	[for i to: methods length do		[methodsimethod [objectsi]].	false]' classified: falseNumber understands: '< n [self - n < 0]' classified: falseNumber understands: 'isNumber' classified: falseNumber understands: 'printon: strm [self printon: strm base: 10]	"default print radix"' classified: falseObject understands: ' x [self=xfalse]' classified: falseObjectReference understands: 'value _ object	[object]' classified: falseOrganizationPane understands: 'close	[classPane _ nil. super close]' classified: falseOrganizationPane understands: 'deselected	["I just lost my selection.  Tell selectorPane to display nothing."	selectorPane of: (Vector new: 0)]' classified: falseOrganizationPane understands: 'dirty	[selectorPane dirty]' classified: falseParagraph understands: 'length [text length]' classified: falseParagraph understands: 'text: text	[alignment _ 0]' classified: falseParsedAssignment understands: 'findMacros: macros compilerTemps: compilerTemps	[var findMacros: macros compilerTemps: compilerTemps.	expr findMacros: macros compilerTemps: compilerTemps]' classified: falseParsedBlock understands: 'firstPush	[(array1) firstPush]' classified: falseParsedConditional understands: 'emitForEffect: code on: stack	[ifExpr emitForValue: code on: stack.	thenSize emitBfp: code on: stack.	thenExpr emitForEffect: code on: stack.	[jmpSize>0 [elseSize emitJmp: code on: stack]].	elseExpr emitForEffect: code on: stack]' classified: falseParsedConjunct understands: 'emitForEffect: code on: stack	[left emitForValue: code on: stack.	rightSize emitBfp: code on: stack.	right emitForEffect: code on: stack]' classified: falseParsedConjunct understands: 'left: left right: right' classified: falseParsedDisjunct understands: 'emittedReceiver	[left]' classified: falseParsedDisjunct understands: 'emittedReceiver _ left' classified: falseParsedDisjunct understands: 'printon: strm indent: level precedence: p forValue: v decompiler: decompiler	[ [p2[strm append: ''('']].	left printon: strm indent: level precedence: 2		forValue: true decompiler: decompiler.	strm append: '' or ''.	right printon: strm indent: level precedence: 2		forValue: v decompiler: decompiler.	p2[strm append: '')'']]' classified: falseParsedDisjunct understands: 'sizeForValue	[rightSize _ right sizeForValue.	left sizeForValue + 2 + rightSize jmpSize + rightSize]' classified: falseParsedLoop understands: 'findMacros: macros compilerTemps: compilerTemps	[whileExpr findMacros: macros compilerTemps: compilerTemps.	doExpr findMacros: macros compilerTemps: compilerTemps]' classified: falseParsedLoop understands: 'firstPush	[whileExpr firstPush]' classified: falseParsedMessage understands: 'emittedReceiver	[rcvr]' classified: falseParsedMessage understands: 'emittedReceiver _ rcvr' classified: falseParsedRemote understands: 'expr: expr' classified: falsePoint understands: '* scale	["Return a Point that is the product of me and scale (which is a Point or Number)"	Point new x: (x * scale asPtX) y: (y * scale asPtY)]' classified: falsePoint understands: '+ delta	["Return a Point that is the sum of me and delta (which is a Point or Number)"	Point new x: (x + delta asPtX) y: (y + delta asPtY)]' classified: falsePoint understands: '- delta	["Return a Point that is the difference of me and delta (which is a Point or Number)"	Point new x: (x - delta asPtX) y: (y - delta asPtY)]' classified: falsePoint understands: '/ scale	["Return a Point that is the quotient of me and scale (which is a Point or Number)"	Point new x: (x / scale asPtX) y: (y / scale asPtY)]' classified: falsePoint understands: 'copy 	[ (xy)	]' classified: falsePoint understands: 'printon: strm 	[strm print: x; append: ''''; print: y]' classified: falseProjectWindow understands: 'classInit	[actionMenu _ Menu new string: ''enter'']' classified: falseProjectWindow understands: 'userview: userview changes: changes parent: parent		"load state"' classified: falseRectangle understands: '* scale ["Return a Rectangle which is the product of me and scale (which is a Rectangle, Point, or Number)"	Rectangle new origin: origin * scale asRectOrigin corner: corner * scale asRectCorner]' classified: falseRectangle understands: '+ delta ["Return a Rectangle which is the sum of me and delta (which is a Rectangle, Point, or Number)"	Rectangle new origin: origin + delta asRectOrigin corner: corner + delta asRectCorner]' classified: falseRectangle understands: '- delta ["Return a Rectangle which is the difference of me and delta (which is a Rectangle, Point, or Number)"	Rectangle new origin: origin - delta asRectOrigin corner: corner - delta asRectCorner]' classified: falseRectangle understands: '/ scale ["Return a Rectangle which is the quotient of me and scale (which is a Rectangle, Point, or Number)"	Rectangle new origin: origin / scale asRectOrigin corner: corner / scale asRectCorner]' classified: falseRectangle understands: 'fromuserevenword | t	["Show the origin cursor until the user presses a mouse button,		then get my origin"	origin_OriginCursor showwhile [user waitbug].	"Show the corner cursor and complement me until the user presses		a button again.  The loop is arranged so 		that complementing stays on for a little while."	t_origin.	CornerCursor showwhile		[while [corner _ t.  t _ user mpnext] do			[self comp.  t _ (((t x) + 15 | 16)  t y) max: origin.  self comp]].	]' classified: falseRectangle understands: 'printon: strm 	[strm print: origin; append: '' rect: ''; print: corner]' classified: falseRectangle understands: 'translateto: pt 	["move the Image to pt."	self translate: pt - origin.	]' classified: falseScrollBar understands: 'close	[owner_nil]' classified: falseSelectorPane understands: 'close	[organizationPane _ nil. super close]' classified: falseSelectorPane understands: 'deselected	[codePane showing: organizationPane noCode]' classified: falseSelectorPane understands: 'from: organizationPane to: codePane' classified: falseSet understands: 'default [self vector: 8]' classified: falseSet understands: 'has: x [(self find: x) > 0]' classified: falseSet understands: 'length [position]' classified: falseSet understands: 'species [array species]' classified: falseSet understands: 'viewer [	SetReader new of: array from: 1 to: position	"self viewRange: 1 to: position"]' classified: falseStackPane understands: 'comment: s		"called by selected via Class fieldNamesInto"' classified: falseStackPane understands: 'contents	"called by selected via Class fieldNamesInto"' classified: falseStackPane understands: 'terminate "called by parser close during initialization"' classified: falseStream understands: ' x	[arrayx]' classified: falseStream understands: ' x _ val	[arrayx _ val]' classified: falseStream understands: 'asStream "leave position where it is"' classified: falseStream understands: 'reset	[position _ 0]' classified: falseStream understands: 'viewer [SetReader new of: array from: 1 to: position]' classified: falseString understands: 'length [self length "In case this is reached by perform:"]' classified: falseString understands: 'unique | u		"copy and intern"	[a intern: self]' classified: falseSymbolTable understands: 'growto: size | name copy	[copy _ self class new init: size.	"create a copy of the new size"	for name from: self do		[copy insert: name withref: (self ref: name)]	"hash each entry into it"	self copyfrom: copy]' classified: falseSystemPane understands: 'leave	 "I am up to date"	[mySysOrgVersion _ user classNames. super leave]' classified: falseTextframe understands: 'frame _ frame	["Change my frame and window."	window _ frame.	]' classified: falseTextframe understands: 'takeCursor	["Move the cursor to the center of my window."	user cursorloc _ window center]' classified: falseTextImage understands: 'keyset' classified: falseTextImage understands: 'text: t width: w | run r	[	c1 _ c2 _ begintypein_ 1.	run _ String new: 2. run word: 1 _  16 * 7 + 0177400.	r _ Rectangle new origin: 00 extent: w(DefaultTextStyle lineheight+2).	self paragraph: (Paragraph new text: t runs: run  alignment: 2) frame: r style: DefaultTextStyle. ]' classified: falseTokenCollector understands: 'string: s	[self next_ s]' classified: falseUniqueString understands: 'classInit | i a v		"make up table of 1-char atoms"	[v _ Vector new: 128. a _ String new: 1.	for i to: 128 do		[a1 _ i-1. vi _ a unique]	UST1 _ v]' classified: falseUserView understands: 'clear		"clear disp of debris and characters"	[disp clear]' classified: falseVector understands: ', x | v	[v _ self growby: 1.	"use a stream if youre in a hurry"	v last _ x. v]' classified: falseWindow understands: 'frame 	[  frame ]' classified: falseWindow understands: 'redbug	[frame flash]' classified: falseProjectWindow classInitUniqueString classInit