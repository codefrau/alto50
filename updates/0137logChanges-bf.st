'Log changes to .changes'UserView understands: 'changeLog logVar do writer | log old n	[FilinSource  nil  []	log _ Stream default.	logVar value_ log.	writer value.	log next_ 30; cr.	old _ user fileString: ''.changes''.	[old  nil  [old _ '''']].	old _ old asStream.	[old limit  10000  []		old position_ old limit - 10000; skipTo: 30; skipTo: 10].	user fileString: ''.changes'' _ old rest + log contents]'Class understands: 'derstands: sel | each spec log	[sel is: Vector  [for each from: sel do			[self derstands: each]]	(messagedict has: sel)  false  []	messagedict _ messagedict delete: sel.	self organization delete: sel.	lastClass _ nil.	lastSelector _ lastClass.	lastParagraph _ lastSelector.	spec _ title + '' '' + sel.	Changes insert: ''~'' + spec.	[Changes has: spec  [Changes delete: spec]].	user changeLog log do [self printForget: sel on: log]]'Class understands: 'install: sel method: m literals: l code: c backpointers: b | log	[messagedict _ messagedict insert: sel method: m literals: l code: c backpointers: b.	lastClass _ self.	lastSelector _ sel.	lastParagraph _ c.	Changes insert: title + '' '' + sel.	user changeLog log do [self printMethod: sel on: log]]'Class understands: 'printdefon: stream | var   	[stream append: self class title;		append: '' new title: '';		append: title; cr;		tab; append: ''subclassof: '' + [superclass  nil  [''nil''] superclass title]; cr;		tab; append: ''fields: '' + myinstvars asString; cr;		tab; append: ''declare: ''''''.	for var from: classvars contents do		[var = ClassOrganization  []		stream append: var; space].	stream append: ''''''''.	instsize nomask: 16384 		[stream semicrtab; append: ''bytesize: ''; print: (instsize anymask: 8192)]	[SystemOrganization has: title  [		stream semicrtab; append: ''classified: ''; print: (SystemOrganization invert: title)]].	[environment  nil  []	for var from: environment do		[stream semicrtab; append: ''sharing: '' + (Smalltalk invert: var)]].	stream cr]'Class understands: 'printMethod: sel on: stream | cat code 	[cat _ self organization invert: sel.	code _ self code: sel.	[code is: Paragraph  [code _ code text]].	stream append: self title + '' understands: ''; print: code.	[cat = ''As yet unclassified''  []	stream append: '' classified: ''; print: cat].	stream cr]'Class understands: 'title: className subclassof: sup fields: fieldNames declare: classVarNames | log	[className  1  (className  1) asUppercase 		[user notify: ''Please capitalize each word in class title: '' + className.		false]	self title: className.	self subclassof: sup.	self fields: fieldNames.	self declare: classVarNames.	Changes insert: ''+'' + className.	user changeLog log do [(SmalltalkclassName) printdefon: log]]'