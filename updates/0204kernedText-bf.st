'Make kerned font rendering work. Also, adjust baseline when setting line height'CodePane understands: 'chooseLineHeight  | lineheight	[lineheight _ pared style lineheight.	(Menu new string: ''+ 10+ 5+ 3+ 2+ 1lineheight='' + lineheight asString + ''- 1- 2- 3'') bugButtonUp		= 1  [pared lineheight_ lineheight+10];		= 2  [pared lineheight_ lineheight+5];		= 3  [pared lineheight_ lineheight+3];		= 4  [pared lineheight_ lineheight+2];		= 5  [pared lineheight_ lineheight+1];		= 6  [pared lineheight_ lineheight];		= 7  [pared lineheight_ lineheight-1];		= 8  [pared lineheight_ lineheight-2];		= 9  [pared lineheight_ lineheight-3]]'StyleSheet understands: 'lineheight: h baseline: b 	[lineheight _ h.	baseline _ b]'Textframe understands: 'charofpoint: pt andrect rect | line leftx rightx y chari scanner pos r 	[line _ 0 max: (self lineofy: pt y).	y _ self yofline: line.	[line = 0 		[chari _ 1. pos _ frame minX(y + style lineheight)]	"else"		pt y  (y + style lineheight) 			[self pointofchar: para length + 1 andrect [r].			rect value_ r.			para length + 1]		scanner _ self printer: false.		scanner scanline: lines  line at: y stopx: pt x stopchar: (lines  line) stopi.		chari _ scanner chari.		rightx _ scanner rightx.		leftx _ scanner leftx.		pt x  (leftx + rightx / 2) or parachari = cr  [pos _ leftxy]		chari _ chari + 1.		pos _ rightxy].	rect value_ pos extent: 0style lineheight.	chari]'Textframe understands: 'lineheight_ h | b ascent descent i font lead	[style _ style copy.	b _ style baseline + h - style lineheight. "default"	[para length > 0  [ "set baseline to center heighest font in line"		ascent _ descent _ 0.		for i from: 2 to: para runs length by: 2 do [			font _ style fontset  ((para runsi land: 240) / 16).			ascent _ ascent max: font ascent.			descent _ descent max: font descent].		lead _ h - ascent.		b _ h - (descent max: (lead/2))]].	style lineheight: h baseline: b.	self show]'TextScanner understands: 'scanline: line at: lineY stopx: sx stopchar: stopChar | nullChar xOfLastSpace stopCode emphasis runAndVal endOfRun padding relX tabsize spacePad alignment	[stopx _ sx.	chari _ line starti - 1.	spacecount _ line spaces.	padding _ line padwidth.	destx _ spacex _ xOfLastSpace _ frame minX.	spacePad _ charpad _ emphasis _ 0.	tabsize _ style tabsize.	spacei _ 1.	[printing  [desty _ lineY. width _ frame maxX - destx. height _ style lineheight.		function _ 28. self callBLT]].	alignment _ para alignment.	[alignment = 0 "left"  []	alignment = 1 "justify" 		[spacecount > 0 			[charpad _ padding / (line stopi - chari + spacecount).			[charpad > 0 				[padding _ padding - (charpad * (line stopi - chari - 2 - spacecount))]].			spacePad _ padding / spacecount.			spacecount _ spacecount - (padding \ spacecount)]]	alignment = 2 "center"  [destx _ destx + (padding / 2)]	alignment = 4 "right"  [destx _ destx + padding]].	stopCode _ 10.	until stopCode < 10 do		[stopCode = 10 			[stopCode _ 255.			chari  stopChar  [stopCode _ 3]			[printing  [self emphasize: emphasis leftx: xOfLastSpace rightx: destx liney: lineY]].			xOfLastSpace _ destx.			chari _ chari + 1.			runAndVal _ para runAndVal: chari.			emphasis _ runAndVal2 land: 15.			endOfRun _ runAndVal1 + chari - 1 min: stopChar.			self setfont: (runAndVal2 lshift: 4) liney: lineY]		stopCode _ self scanword: endOfRun.		stopCode > 10 			[[stopCode = 12  "space"				[spacecount _ spacecount - 1.				[spacecount = 0  [spacePad _ spacePad + 1]].				spacei _ chari.				spacex _ destx.				width _ spacesize + spacePad]			stopCode = 13  "tab"				[relX _ destx - frame minX.				width _ [para alignment > 0  [tabsize + charpad]						relX + tabsize | tabsize - relX]]			[stopCode = 11  [nullChar _ maxascii + 1]].			sourcex _ xtable(nullChar + 1).			width _ xtable(nullChar + 2) - sourcex.			[printing 				[function _ [kern = 0  [16] 17].				self callBLT]].			width _ width + charpad].			destx _ destx + width.			destx > stopx  [stopCode _ 2]			chari  endOfRun  [stopCode _ 10]			chari _ chari + 1]		stopCode = 4  [width _ 0]].	printing  [self emphasize: emphasis leftx: xOfLastSpace rightx: destx liney: lineY]]'UserView understands: 'changeLog logVar do writer | log old n	[FilinSource  nil  ["do not log filins"]	log _ Stream default.	logVar value_ log.	writer value.	log next_ 30; cr.	old _ user fileString: ''.changes''.	[old  nil  [old _ '''']].	old _ old asStream.	[old limit  20000  []		old position_ old limit - 20000; skipTo: 30; skipTo: 10].	user fileString: ''.changes'' _ old rest + log contents]'StyleSheet derstands: 'lineheight:' unique.StyleSheet derstands: 'lineheight_' unique.