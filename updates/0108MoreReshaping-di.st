Class understands: 'fields: fieldString  | r a b s h sel priorChanges	[myinstvars _ fieldString.	messagedict _ MessageDict init.	r _ self realself.	a _ self instvars.	h_ HashSet init.	for s from: a do		[h has: s [user notify: s+'' is used already (maybe in superclass)'']		h insert: s].	self=r[self initClass]	a=(b_ r instvars)		[r environment_ nil; myinstvars_ myinstvars; subclassof: superclass]	"The class is being reshaped..."	user cr; show: ''Recompiling '' + title +''...''.	[r howMany>0[user cr; show:''There will be obsolete instances'']].	classvars _ r classvars copy.	messagedict _ MessageDict init.	priorChanges _ Changes copy.	for sel from: r messages do		[self copy: sel from: r].	Changes _ priorChanges.	self fixSubClassesOf: r.	r obsolete.	Smalltalktitle unique _ self.	self initClass]' classified: 'As yet unclassified'Class understands: 'noChanges |  chg plusName className tildaName prefix	[className _ self title.	plusName _ ''+'' + className.	tildaName _ ''~'' + className.	for chg from: Changes contents do		[prefix _ chg asStream upto: '' ''  1.		prefix = className [Changes delete: chg]		prefix = plusName [Changes delete: chg]		prefix = tildaName [Changes delete: chg]	]]' classified: 'As yet unclassified'Class understands: 'obsolete		"Make it obvious that this class has been supplanted"	[title _ ''AnObsolete''+title]' classified: 'As yet unclassified'Class derstands: removeFromChanges.