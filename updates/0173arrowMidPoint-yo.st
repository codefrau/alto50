ArrowWindow understands: 'controlPoints	[ (beginPoint endPoint centerPoint)]'ArrowWindow understands: 'default | pt	[self crossHairCursor showwhile [pt _ user waitbug].	self style: beginPoint _ pt.	self style: endPoint _ pt.	self style: centerPoint _ pt.	self style: hasHead _ true.	frame _ (pt rect: pt) inset: 2020.	self pointMove: endPoint]'ArrowWindow understands: 'draw: function | t headAngle w	[t _ Turtle init.		[nil  function  [t function_ function]].	w _ self style: borderWidth.	t width: w.	t color: (self style: borderColor).	t place: (self style: beginPoint).	t goto: (self style: endPoint).	t batch: true.	headAngle _ 12.	[w  8  [headAngle _ 23]	w = 4  [headAngle _ 18]	w = 2  [headAngle _ 14]].		(self style: hasHead) = true  [		t up.		t turn: (((self style: endPoint) - (self style: beginPoint)) theta / 3.1415926 * 180.0) + 90.0.		t turn: (180 - headAngle).		t go: 20.		t penup.		t turn: 180.		t go: 20.		t pendn.		t turn: headAngle.		t turn: (180 - headAngle) negated.		t go: 20]]'ArrowWindow understands: 'fixPoint: pt of: whichPt | other	[user shiftKey  [		[whichPt = beginPoint  [			other _ style  endPoint]		other _ style  beginPoint].		[(other x - pt x) abs > (other y - pt y) abs  [			 pt x  other y]		 other x  pt y]]	[whichPt = centerPoint  [		self style: beginPoint _ (self style: beginPoint) + pt - (self style: centerPoint).		self style: endPoint _ (self style: endPoint) + pt - (self style: centerPoint)]	whichPt = beginPoint  [		self style: centerPoint _ ((self style: endPoint) + pt) / 2]	whichPt = endPoint  [		self style: centerPoint _ ((self style: beginPoint) + pt) / 2]].	 pt]'