'Add cursor keys, page up/down, home/end, select with shift,  and select all'Class new title: TextImage	subclassof: Textframe	fields: 'c1 c2 begintypein superimage oldEntity sel'	declare: 'on paste paragraphmenu ctlw doit cut left right down all pageup up pagedown end undo again prompt compile esc off Scrap scrap cancel home bs Deletion 'TextImage understands: 'classInit 	[bs _ 8.	ctlw _ 145.	esc _ 160.	cut _ 173.	paste _ 158.	doit _ 130. "doit key. doit char is 30"	prompt _ 167. "prompt key. prompt char is 20"	again _ 134.	all _ 136.	compile _ 138.	undo _ 153.	cancel _ 165.	left _ 193.	right _ 194.	up _ 195.	down _ 196.	pageup _ 197.	pagedown _ 198.	home _ 202.	end _ 203.	Deletion _ nullString.	Scrap _ Deletion.	on _ 1.	off _ 0.	paragraphmenu _ Menu new string: ''againcopycutpastedoitcompileundocancelalignfitresize'']'TextImage understands: 'cursorBackward var to block shift: shift	[self unselect.	[shift 		[[c1 = c2  [begintypein _ c2]].		begintypein = c2 			[var value_ c1. c1 _ block eval max: 1]		var value_ c2. c2 _ block eval max: 1.		c1 _ c1 min: c2].	"no shift"		[c1 = c2  [var value_ c1. c1 _ block eval max: 1]].		c2 _ c1].	self selectAndScroll]'TextImage understands: 'cursorForward var to block shift: shift	[self unselect.	[shift 		[[c1 = c2  [begintypein _ c1]].		begintypein = c1 			[var value_ c2. c2 _ block eval min: para length + 1]		var value_ c1. c1 _ block eval min: para length + 1.		c2 _ c2 max: c1].	"no shift"		[c1 = c2  [var value_ c2. c2 _ block eval min: para length + 1]].		c1 _ c2].	self selectAndScroll]'TextImage understands: 'kbd | typed key shift c	"For typing speed this processes all the keys already queued.	It returns when the queue is empty, or a special key was processed"	[c1 < c2 and self checklooks  []	typed _ Set new string: 16.	[begintypein  []	Deletion _ self selection.	begintypein _ c1].	while [key _ user kbdnext. shift _ user shiftKey.	key] do		[key = bs 			[c1 < c2  [] "deleting selection happens below"			typed empty 				[c1 _ 1 max: c1 - 1.				begintypein _ begintypein min: c1]			typed skip: 1]		key = cut  [self copyselection] "because mapped to cmd-c"		key = paste 			[self replace: typed.			begintypein _ c1 _ c2.			self paste]		key = ctlw 			[ [typed empty  [] self replace: typed. typed reset. c1 _ c2].			c1 _ 1 max: c1 - 1.			while (c1 > 1 and (para  (c1 - 1)) tokenish) do				[c1 _ c1 - 1].			begintypein _ begintypein min: c1]		key = esc 			[ [typed empty  [] self replace: typed. typed reset. c1 _ c2].			self fintype.			c1 _ c2 - Scrap length.			self complement]		key = 130   "doit"			[[typed empty  [] self replace: typed. typed reset. c1 _ c2].			begintypein _ false.			self doit: false]		key = 167  "doit prompt"			[typed next_ 20; space]		key = cr  "if listening doit, otherwise insert"			[[typed empty  [] self replace: typed. typed reset. c1 _ c2].			self isListening  [begintypein _ false. self doit: true]			typed next_ key]		key = all 			[[typed empty  [] self replace: typed].			self unselect. begintypein _ c1 _ 1. c2 _ para length + 1.			self select]		key = left 			[[typed empty  [] self replace: typed].			self cursorBackward c to c - 1 shift: shift]		key = right 			[[typed empty  [] self replace: typed].			self cursorForward c to c + 1 shift: shift].		key = up 			[[typed empty  [] self replace: typed].			self cursorBackward c to (self charofpt: (self pointofchar: c) - (0self lineheight)) shift: shift]		key = down 			[[typed empty  [] self replace: typed].			self cursorForward c to (self charofpt: (self pointofchar: c) + (0self lineheight)) shift: shift]		key = pageup 			[[typed empty  [] self replace: typed].			self cursorBackward c to (self charofpt: (self pointofchar: c) - (0window height)) shift: shift]		key = pagedown 			[[typed empty  [] self replace: typed].			self cursorForward c to (self charofpt: (self pointofchar: c) + (0window height)) shift: shift]		key = home 			[[typed empty  [] self replace: typed].			self cursorBackward c to [while (c > 1 and para(c-1)  cr) do [c _ c - 1]. c] shift: shift]		key = end 			[[typed empty  [] self replace: typed].			self cursorForward c to [while (c  para length and parac  cr) do [c _ c + 1]. c] shift: shift]		typed next_ key].	self replace: typed.	c1 _ c2.	self selectAndScroll]'TextImage derstands: 'Scrap_' unique.TextImage classInit