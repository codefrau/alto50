'Restores many sources for Class.  Allows adding instvars.'Class understands: 'x [classvarsx]' classified: 'As yet unclassified'Class understands: 'x _ val [classvarsx _ val]' classified: 'As yet unclassified'Class understands: 'abstract	[self fields: nullString]' classified: 'As yet unclassified'Class understands: 'canunderstand: selector	[messagedict has: selector]' classified: 'As yet unclassified'Class understands: 'canUnderstand: selector	[messagedict has: selector [self]	superclassnil [false]	superclass canUnderstand: selector]' classified: 'As yet unclassified'Class understands: 'classInit		"gets propagated to a dummy instance"	[self new classInit]' classified: 'As yet unclassified'Class understands: 'classvars [classvars]' classified: 'As yet unclassified'Class understands: 'clean | name	"release unreferenced classvars"	[for name from: classvars do		[nameClassOrganization and (classvars ref: name) refct=1			[classvars delete: name]]]' classified: 'As yet unclassified'Class understands: 'copy: inst | t i n	[t _ self new.	n _ self instsize min: inst class instsize.	for i to: n do		[t instfield: i _ inst instfield: i]	t]' classified: 'As yet unclassified'Class understands: 'copy: sel from: class	[self copy: sel from: class classified: nil]' classified: 'As yet unclassified'Class understands: 'copy: sel from: class classified: cat "Useful when modifying an existing class"		| s code	[sel is: Vector [for s from: sel do [self copy: s from: class classified: cat]]	sel is: String [self copy: (class organization category: sel) from: class classified: cat]	code _ class code: sel.  codenil []	[catnil [cat _ class organization invert: sel]].	[messagedict has: sel		[code text=(self code: sel) text []		user notify: title+'' ''+sel+'' will be redefined if you proceed.'']].	self understands: code classified: cat]' classified: 'As yet unclassified'Class understands: 'copyof: oldClass subclassof: newSubClass	[title _ oldClass title.	 self subclassof: newSubClass.	 classvars _ oldClass classvars.	 environment _ oldClass environment.	 self newFieldsForSubClass: oldClass myinstvars]' classified: 'As yet unclassified'Class understands: 'declare: v | var recom	[selfself realself[self realself declare: v]	 [classvarsnil[classvars _ SymbolTable init]].	 v is: String[self declare: v asVector]	 recom _ false.	 [v is: Vector		[for var from: v do			[(Smalltalk has: var) or: (Undeclared has: var)[recom _ true]]]	  (Smalltalk has: v) or: (Undeclared has: v)[recom _ true]].	 [recom		[user notify: ''Methods recompile if you proceed, global became local'']].	 [v is: Vector		[for var from: v do			[classvars has: var[].			classvars insert: var with: nil]]	  classvars has: v[].	  classvars insert: v with: nil].	 recom[self compileall]]' classified: 'As yet unclassified'Class understands: 'decompile: t1 	[user displayoffwhile [Decompiler new decompile: t1 class: self]]' classified: 'As yet unclassified'Class understands: 'default	[self new default]' classified: 'As yet unclassified'Class understands: 'describe: method on: strm | sel cls  "append mclass and selector"	[cls _ self.	until [clsnil [cls_self. sel_?] sel _ cls md invert: method] do		[cls _ cls superclass].	strm append: cls title; space; append: sel]' classified: 'As yet unclassified'Class understands: 'ed: selector | c s	[c_ self code: selector. user clearshow: c.	while (s_ user request: ''substitute: '') do		[c _ c subst: s for: (user request: ''for: '').		user clearshow: c]	self understands: c]' classified: 'As yet unclassified'Class understands: 'edit: selector | para s v	[para _		[selector=ClassOrganization			[self organization asParagraph]		messagedict has: selector[self code: selector]		nullString asParagraph].	self edit: selector para: para formerly: false]' classified: 'As yet unclassified'Class understands: 'edit: selector para: para formerly: oldpara	[user leaveTop.	user restartup: (CodeWindow new class: self selector: selector para: para formerly: oldpara)]' classified: 'As yet unclassified'Class understands: 'environment	[environment]' classified: 'As yet unclassified'Class understands: 'environment _ environment [] "for resetting to reread sharing clauses"' classified: 'As yet unclassified'Class understands: 'execute: code		"disposable methods"	[self understands: ''doit ['' + code + '']''.	self new doit]' classified: 'As yet unclassified'Class understands: 'fieldNamesInto: collector	[[superclassnil [] superclass fieldNamesInto: collector].	(Reader new of: myinstvars) readInto: collector]' classified: 'As yet unclassified'Class understands: 'fields: myinstvars | r a b s h		"list of instance variables"	[messagedict _ MessageDict init.	 r _ self realself.	a _ self instvars.	h_ HashSet init.	for s from: a do		[h has: s			[user notify: s+'' is used already (maybe in superclass)'']		h insert: s].	 self=r[self initClass]	 a=(b_ r instvars)		[r environment_ nil; myinstvars_ myinstvars; subclassof: superclass]	 "error messages currently a problem for UserView"	[r howMany>0[user cr; show:''There will be obsolete instances...'']].	 classvars _ r classvars.	 messagedict _ r md "copy".	 	[a lengthb length or a(1 to: b length)b	"just adding new inst fields"			[user cr; show: title+ '' methods recompiling...''.			 self compileall]].	 self fixSubClassesOf: r.	 "r md init. - allow old instances to run"	 r obsolete.	 Smalltalktitle unique _ self.	 self initClass]' classified: 'As yet unclassified'Class understands: 'fixSubClassesOf: oldClass | n subClass	[for n from: user classNames do		[subClass _ Smalltalkn.		 subClass superclassoldClass			[Class new copyof: subClass subclassof: self]]]' classified: 'As yet unclassified'Class understands: 'init		"init and default get propagated to instances"	[self new init]' classified: 'As yet unclassified'Class understands: 'init: n		"init and default get propagated to instances"	[self new init: n]' classified: 'As yet unclassified'Class understands: 'instfield:	 i	"prevent user from getting freelist"	[i > Class instsize [user notify: ''arg too big'']	super instfield: i]' classified: 'As yet unclassified'Class understands: 'instvars	[self fieldNamesInto: FieldNameCollector default]' classified: 'As yet unclassified'Class understands: 'invertRef: refs "Refs may be a vector (to allow batching)" 		| cl env source ref inv sym t	[refs isnt: Vector [(self invert: refs inVector)1]	env _ (self wholeEnvironment concat: (Undeclared, Smalltalk)) asStream.	source _ Dictionary init.	refs transform ref to		[cl _ self. env reset.			until				[(sym _ env next)false [inv _ ''unknown '' concat: ref asOop base8]				[clnil and symcl classvars [t _ cl title. cl _ cl superclass] t _ false].				(inv _ sym invertRef: ref)false [false]				[t []				 t _ source lookup: sym []				 source insert: sym with: (t _ Smalltalk invert: sym)].				inv _ (t concat: '' '') concat: inv]			 do [].		inv]	]' classified: 'As yet unclassified'Class understands: 'Isa: x  "is x on my superclass chain?"	[superclass  x [true];  nil [false]	superclass Isa: x]' classified: 'As yet unclassified'Class understands: 'md [messagedict]' classified: 'As yet unclassified'Class understands: 'method: sel	[messagedict methodorfalse: sel]' classified: 'As yet unclassified'Class understands: 'myinstvars	[myinstvars]' classified: 'As yet unclassified'Class understands: 'myinstvars _ myinstvars' classified: 'As yet unclassified'Class understands: 'new: length "To allow fixed-length classes to simulate variable-length ones"	[self new init: length] "By convention"' classified: 'As yet unclassified'Class understands: 'newFieldsForSubClass: myinstvars | r a b		"list of instance variables"	[messagedict _ MessageDict init.	 r _ self realself.	 self=r		[user notify: ''problem in class redefinition. See coment at end of method'']	 (a_ self instvars)=(b_ r instvars)		[user notify: ''problem in class redefinition. See coment at end of method'']	 [r howMany>0[user cr show: ''All ''+title+''s are obsolete.'']].	 classvars _ r classvars.	 messagedict _ r md copy.	 r md init.	 	[a lengthb length or a(1 to: b length)b		"changing inst fields"			[user cr show: title+ '' recompiled.''.			 self compileall]].	 self fixSubClassesOf: r.	 r obsolete.	 Smalltalktitle unique _ self.	 self initClass]		"Regarding the notifys in this method: It is my understanding		 that this method will only be invoked when the conditions		 leading to the notifys are false. If I''m available, I''d like to see		 any case that results in notification.				Dave Robson"' classified: 'As yet unclassified'Class understands: 'notify: errorString at: position in: stream	[self notify: errorString at: position in: stream for: self]' classified: 'As yet unclassified'Class understands: 'obsolete		"invalidate further communication"	[title _ ''AnObsolete''+title.	true[ self].  "Allow old instances to continue running."	classvars _ nil.		"recycle class variables"	messagedict close.		"invalidate and recycle local messages"	environment _ self.		"keep me around for old instances"	superclass _ Object.		"invalidate superclass messages"]' classified: 'As yet unclassified'Class understands: 'print: inst on: strm | ivars i	[ivars _ self instvars.	strm append: ''(''; append: title; append: '' new ''.	for i to: instsize do		[strm append: ivarsi; append: '': '';			print: (inst instfield: i); space]	strm append: '')'']' classified: 'As yet unclassified'Class understands: 'printon: strm	[strm append: ''Class '' + title]' classified: 'As yet unclassified'Class understands: 'realself [Smalltalktitle unique]		"as opposed to possible filin ghost"' classified: 'As yet unclassified'Class understands: 'recopy: inst | t i	[t _ self new.	for i to: self instsize do		[t instfield: i _ (inst instfield: i) recopy]	t]' classified: 'As yet unclassified'Class understands: 'rename: newtitle		| name newname oldclass category	[name _ title unique.  newname _ newtitle unique.		[Smalltalk has: newname			[oldclass _ Smalltalknewname.			user notify: ''All '' + newtitle + ''s will become obsolete if you proceed''.			oldclass obsolete]		category _ SystemOrganization invert: name.		AllClassNames _ AllClassNames insertSorted: newname.		SystemOrganization classify: newname under: category].	Smalltalk delete: name.	AllClassNames _ AllClassNames delete: name.	SystemOrganization delete: name.	title _ newtitle.	Smalltalk declare: newname as: self]' classified: 'As yet unclassified'Class understands: 'selectors		"Return a Vector of all my selectors."	[self messages]' classified: 'As yet unclassified'Class understands: 'sharing: table	[selfself realself[self realself sharing: table]	environment _ environment asVector , table]' classified: 'As yet unclassified'Class understands: 'shrink [messagedict _ messagedict shrink]' classified: 'As yet unclassified'Class understands: 'space | a s	[s _ 0. for a from: messagedict do		[s _ s + (messagedict method: a) length]	s]' classified: 'As yet unclassified'Class understands: 'subclassof: superclass	[(superclass isnt: Class) and (superclass isnt: VariableLengthClass)		[user notify: ''Superclass is not yet defined or not a Class'']]' classified: 'As yet unclassified'Class understands: 'superclass [superclass]' classified: 'As yet unclassified'Class understands: 'title [title]' classified: 'As yet unclassified'Class understands: 'title: title	[self title: (title _ title unique) insystem: Smalltalk]' classified: 'As yet unclassified'Class understands: 'title: name insystem: system | cl	[superclass _ Object.	[system has: name		[cl _ (systemname) class.		clself class [self]		user notify: name + '' will change from a '' + cl title + '' to a '' + self class title + '' if you proceed...'']].	system declare: name as: self.	AllClassNames _ AllClassNames insertSorted: name.	SystemOrganization classify: name under: ''As yet unclassified'']' classified: 'As yet unclassified'Class understands: 'understands: code | selector old		"install method"	[self understands: code classified: ''As yet unclassified'']' classified: 'As yet unclassified'Class understands: 'understands: code classified: heading		"compile and install method"	[Generator new compile: code asParagraph		in: self under: heading notifying: self]' classified: 'As yet unclassified'Class understands: 'veryspecial: n		"inaccessible fields"	[instsize _ self instvars length + n]' classified: 'As yet unclassified'Class understands: 'wholeEnvironment	[(classvars asVector concat: environment asVector) concat:		[superclassnil [()] superclass wholeEnvironment]]' classified: 'As yet unclassified'Class understands: 'whosends: selector | s l a	[s _ Stream default.	for a from: messagedict do		[for l from: (messagedict literals: a) do			[selectorl[s append: a; space]]]	s contents]' classified: 'As yet unclassified'