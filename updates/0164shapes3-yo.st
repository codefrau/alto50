Class new title: StarWindow	subclassof: ShapeWindow	fields: ''	declare: '';	classified: 'Windows'StarWindow understands: 'default | pt	[self crossHairCursor showwhile [pt _ user waitbug].	self style: centerPoint _ pt.	self style: firstPoint _ pt.	frame _ (pt rect: pt) inset: 2020.	self pointMove: firstPoint]'StarWindow understands: 'dist: p1 and: p2 | dx dy 	[dx _ p1 x asFloat - p2 x asFloat.	dy _ p1 y asFloat - p2 y asFloat.	(dx * dx + (dy * dy)) sqrt]'StarWindow understands: 'draw: function | t first c i d dd	[first _ self style: firstPoint.	c _ self style: centerPoint.	t _ Turtle init.	d _ self dist: c and: first.	dd _ ((1.0 - (144.0 / 180.0 * 3.1415926) cos) * 2.0 * d * d) sqrt.	t batch: true.	[nil  function  [t function_ function]].	t width: (self style: borderWidth).	t color: (self style: borderColor).	t place: c.	t up.	t turn: ((first - c) theta / 3.1415926 * 180.0) + 90.0.	t penup.	t go: d.	t pendn.	t turn: 162.	for i to: 5 do [		t go: dd.		t turn: 144]]'StarWindow understands: 'eachtime	[(self pointHotspot: stylecenterPoint) has: user mp		 [self crossHairCursor showwhile [self pointMove: centerPoint]. true].	(self pointHotspot: stylefirstPoint) has: user mp		 [self crossHairCursor showwhile [self pointMove: firstPoint]. true].	super eachtime]'StarWindow understands: 'fixPoint: pt of: whichPt | other	[whichPt = centerPoint  [		self style: firstPoint _ (self style: firstPoint) + pt - (self style: centerPoint).		 pt]	 pt]'StarWindow understands: 'updateFrame | d f c	[c _ self style: centerPoint.	f _ self style: firstPoint.	d _ (self dist: c and: f) asInteger.	 (c rect: c) inset: ((2020) - (d  d))]'UserView understands: 'bugScreenMenu | m w turtle i f index file	[m _ 0.	screenMenu bug	= (m_m+1)  [projectWindow runParent];	= (m_m+1)  [projectSequencer visitNext];	= (m_m+1)  [self restore];	= (m_m+1)  [self schedule: ProjectWindow init];	= (m_m+1)  [self schedule: ProjectSorter init];	= (m_m+1)  [self schedule: BrowseWindow default];	= (m_m+1)  [self schedule: (CodeWindow new class: UserView selector: workspace para: (UserView code: workspace) formerly: false)];	= (m_m+1)  [w _ self loadFormWindow  [self schedule: w enter]];	= (m_m+1)  [user schedule: (ArrowWindow new default)];	= (m_m+1)  [user schedule: (RectWindow new default)];	= (m_m+1)  [user schedule: (EllipseWindow new default)];	= (m_m+1)  [user schedule: (StarWindow new default)];	= (m_m+1)  [self schedule: (D1TopWindow new default)];	= (m_m+1) 		[turtle _ Turtle init.		turtle color: black; width: 4; inking: oring.		for i to: 50 do [turtle go: i * 4; turn: 89]];	= (m_m+1) 		[f _ self fileMenu: ''edit'' directory: '''' matching: ''*''			 [self editFile: f]];	= (m_m+1) 		[f _ self fileMenu: ''file in'' directory: '''' matching: ''*.st''			 [self filin: f]];	= (m_m+1) 		[f _ self fileMenu: ''file delete'' directory: '''' matching: ''*''			 [self confirm: ''Really delete '' + f  [self fileString: f _ nil]]];		= (m_m+1) 		[f _ self fileMenu: ''publish'' directory: '''' matching: ''*.st''			 [file _ self fileString: f.			self fileString: (self update: f _ file) _ file.			self fileString: f _ nil]];	= (m_m+1)  [self loadUpdates];	= (m_m+1)  [user save]]'UserView understands: 'classInit 	[screenMenu _ Menu new string:''go to parent projectgo to next projectrestore displayopen a projectopen a project sorteropen a browseropen a workspaceopen form ...create an arrowcreate a rectanglecreate an ellipsecreate a startablet demoturtle demoedit file ...file in ...delete file ...publish update ...load updatessave'']'EllipseWindow classvars delete: CrossHairCursor.ArrowWindow classvars delete: CrossHairCursor.UserView classInit