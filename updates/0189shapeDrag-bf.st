'Allow shapes to be dragged by red button (also, reframing and general cleanup'ArrowWindow understands: 'controlPoints	[ (beginPoint endPoint)]'ArrowWindow understands: 'default	[self style: hasHead _ true.	super default]'ArrowWindow understands: 'draw: function | t headAngle w	[t _ self turtle: function.	"draw line"	t place: (stylebeginPoint); goto: (styleendPoint).	"draw head"	self style: hasHead  [		w _ self style: borderWidth.		headAngle _ [w8[23] w4[18] w2[14] 12].		t up; turn: (((styleendPoint) - (stylebeginPoint)) theta asDegrees) + 90.0.		t turn: 180 - headAngle; go: 20.		t penup; turn: 180; go: 20; pendn.		t turn: headAngle * 2 - 180; go: 20]]'ArrowWindow understands: 'fixPoint: pt of: whichPt | other	[user shiftKey  [		other _ style  [whichPt = beginPoint  [endPoint] beginPoint].		[(other x - pt x) abs > (other y - pt y) abs  [			 pt x  other y]		 other x  pt y]]	 pt]'EllipseWindow understands: 'controlPoints	[ (topPoint rightPoint)]'EllipseWindow understands: 'default | rect	[rect _ Rectangle fromuser.	self style: topPoint _ rect center x  rect top.	self style: rightPoint _ rect rightside  rect center y.	self style: fill _ nil.	self stlyle: borderWidth _ 4.	frame _ rect inset: 2020]'EllipseWindow understands: 'draw: function | top right center radii turtle phi	[top _ self style: topPoint.	right _ self style: rightPoint.	center _ top x  right y.	radii _ (right x - center x)  (center y - top y).	turtle _ self turtle: function.	turtle place: right.	for phi from: 0.0 to: 360.0 asRadians by: 5.0 asRadians do [		turtle goto: (phi cosphi sin) * radii + center]]'EllipseWindow understands: 'updateFrame | t r h w	[t _ style  topPoint.	r _ style  rightPoint.	h _ r y - t y.	w _ r x - t x.	 (t x - w  t y rect: r x  (r y + h)) inset: 2020]'RectWindow understands: 'draw: function | t fill b e	[b _ self style: beginPoint.	e _ self style: endPoint.	t _ self turtle: function.	t place: b.	t goto: b x  e y.	t goto: e.	t goto: e x  b y.	t goto: b]'ShapeWindow understands: 'default | pt pos	[self style: fill _ nil;		style: borderWidth _ 4.	self crossHairCursor showwhile [pos _ user waitbug].	for pt from: self controlPoints do [		self style: pt _ pos].	frame _ self updateFrame.	self pointMove: self controlPoints last]'ShapeWindow understands: 'newframe | oldFrame points pt i	[frame  nil  [super newframe].	oldFrame _ frame copy.	points _ self controlPoints transform pt to [		stylept - frame origin * 1000 / frame extent].	super newframe.	for i to: points length do [		pt _ self controlPointsi.		stylept _ pointsi * frame extent / 1000 + frame origin].	user restore: oldFrame without: self.	self show]'ShapeWindow understands: 'pointMove: whichPt | oldFrame hotspot other	[hotspot _ self pointHotspot: stylewhichPt.	until user anybug do		[(hotspot has: user mp)  false  [false]].	user bluebug[self bluebug].	oldFrame _ frame copy.	self draw: xoring.	while user anybug do [		self draw: xoring.		style  whichPt _  self fixPoint: user mp of: whichPt.		self draw: xoring.	].	self frame: self updateFrame.	user restore: oldFrame without: self.	self show]'ShapeWindow understands: 'redbug | oldFrame prev pos pt	[oldFrame _ frame copy.	prev _ user mp.	self draw: xoring.	while user anybug do [		self draw: xoring.		pos _ user mp.		for pt from: self controlPoints do [			stylept _ stylept + (pos - prev)].		prev _ pos.		self frame: self updateFrame.		self draw: xoring.	].	user restore: oldFrame without: self.	self show]'ShapeWindow understands: 'show	[growing  []	self draw: storing]'ShapeWindow understands: 'turtle: function | t	[(t _ Turtle init)		function_ function;		width: (self style: borderWidth);		color: [function = xoring  [black] self style: borderColor];		batch: true.	t]'StarWindow understands: 'draw: function | t first center i radius dist	[first _ self style: firstPoint.	center _ self style: centerPoint.	radius _ self dist: center and: first.	dist _ ((1.0 - 144.0 asRadians cos) * 2.0 * radius * radius) sqrt.	t _ self turtle: function.	t place: first.	t up; turn: (first - center) theta asDegrees + 90.0.	t turn: 162.	for i to: 5 do [		t go: dist; turn: 144]]'Window understands: 'newframe | pos rect 	[user waitnobug.	[frame  nil  []	self aboutToFrame].	pos _ OriginCursor showwhile [user waitbug].	growing _ true.	frame _ self fixframe: (pos rect: pos + 32).	frame boxcomp.	CornerCursor showwhile 		[while [pos _ user mpnext. pos] do			[[rect  nil  [user cursorloc_ pos max: frame corner]].			rect _ frame copy.			frame boxcomp.			frame _ self fixframe: (frame growto: pos).			frame boxcomp]].	frame boxcomp.	self frame: frame.	growing _ false.	self forgetBits.	self takeCursor]'EllipseWindow derstands: 'fixPoint:of:' unique.RectWindow derstands: 'default' unique.StarWindow derstands: 'default' unique.