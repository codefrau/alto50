ProjectSorter understands: ' index | name p	[self validateNames.	name _ namesInOrder  (index - 1 \ namesInOrder length + 1).	self projectNamed: name]'ProjectSorter understands: 'projectNamed: name | p	[for p from: self allProjects do [p title = name  [p]].	false]'ProjectSorter understands: 'validateNames | projects nowNames newNames n p	[projects _ self allProjects.	nowNames _ projects transform p to [p title].	"Remove old names and add new names to namesInOrder"	namesInOrder _ self namesInOrder all n suchThat [nowNames has: n].	newNames _ nowNames all n suchThat [(namesInOrder has: n)  false].	namesInOrder _ namesInOrder concat: newNames.	namesInOrder]'ProjectSorter understands: 'visit: index	[(self  index) install]'ProjectSorter understands: 'visitNext	[self visit: (self validateNames find: self current) + 1]'ProjectSorter understands: 'visitPrevious	[self visit: (self validateNames find: self current) - 1]'UserView understands: 'bugScreenMenu | m w turtle i f index file	[m _ 0.	screenMenu bug	= (m_m+1)  [projectWindow runParent];	= (m_m+1)  [projectSequencer visitNext];	= (m_m+1)  [self restore];	= (m_m+1)  [projectSequencer newProject];	= (m_m+1)  [self schedule: ProjectSorter init];	= (m_m+1)  [self schedule: BrowseWindow default];	= (m_m+1)  [self schedule: (CodeWindow new class: UserView selector: workspace para: (UserView code: workspace) formerly: false)];	= (m_m+1)  [w _ self loadFormWindow  [self schedule: w enter]];	= (m_m+1)  [user schedule: ArrowWindow default];	= (m_m+1)  [user schedule: RectWindow default];	= (m_m+1)  [user schedule: EllipseWindow default];	= (m_m+1)  [user schedule: StarWindow default];	= (m_m+1)  [self schedule: D1TopWindow default];	= (m_m+1) 		[turtle _ Turtle init.		turtle color: black; width: 4; inking: oring.		for i to: 50 do [turtle go: i * 4; turn: 89]];	= (m_m+1) 		[f _ self fileMenu: ''edit'' directory: '''' matching: ''*''			 [self editFile: f]];	= (m_m+1) 		[f _ self fileMenu: ''file in'' directory: '''' matching: ''*.st''			 [self filin: f]];	= (m_m+1) 		[f _ self fileMenu: ''file delete'' directory: '''' matching: ''*''			 [self confirm: ''Really delete '' + f  [self fileString: f _ nil]]];		= (m_m+1) 		[f _ self fileMenu: ''publish'' directory: '''' matching: ''*.st''			 [file _ self fileString: f.			self fileString: (self update: f _ file) _ file.			self fileString: f _ nil]];	= (m_m+1)  [self loadUpdates];	= (m_m+1)  [user save]]'