Process organization fromParagraph:'''NoteTaker processes were designed to take advantage of the 8086 stack.  The stack grows downward in memory, the stack frames are set up like the 8086, and the frames overlap with the stack top of one frame being the receiver and args of the next.Note that the stack pointer and pc are internal to the VM, and are only accessible when a .thisContext. bytecode causes them to be written to the stack and the stack pointer to be recorded in top.The stack pointer is recorded relative to the end of the process so that it will remain valid if the process needs to be expanded.''(''init-restart'' goBaby init restart run send:to: send:to:withArgs: setRestart )(''VM operation'' pop popN: push: )(''control'' current eval remoteCopy )(''testing'' bounceBackTest: )(''private'' hash topIndex topIndex_ )' asParagraph for: ProcessProcessFrame organization fromParagraph:'''A ProcessFrame is an outrigger on a process, providing the ability to identify stack frames and their individula fields.  The NoteTaker frames are only linked back from callee to caller, but a more laborious traversal forward is possible using the logic in successor.''(''initialize'' classInit from: process:bp: )(''context access'' arguments arguments: mclass message method nargs pc receiver sender tempframe temps )(''frame access'' caller callerBP callerPC hasCaller stack successor thisop )(''debugger access'' climb resume:with: variableNamesInto:with: )(''accessing'' bp process )(''printing'' printon: )' asParagraph for: ProcessFrameRemoteCode organization fromParagraph:'''In order to handle Smalltalk-76 remote code (predecessor to blocks) outrigger RemoteCode instances allowed code evaluation to be controlled by, and to return to, code other than its sender.''(''accessing'' frameOffset )(''control'' eval value value_ )' asParagraph for: RemoteCode