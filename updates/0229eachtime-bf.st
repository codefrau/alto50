'Provide eachtime control message that loops until ESC is pressed'Generator understands: 'eachtime: block args: arg | cond	[cond _ self rcvr: (self variable: ''user'') selector: ''eachtimeAgain'' args: ().	self whiledo: block args: (self noEvalKeyword: cond), arg]"macro (perform)"'Generator understands: 'macro: block selector: sel args: args		| special	[special _ inLineMsgs lookup: sel		[self perform: special with: block with: args]	Context canunderstand: sel unique		[block next _ self rcvr: toLoadThisCtxt selector: sel args: (args remote: self)]	false]"Parser keywordMessage"'Generator understands: 'untildo: block args: args	[block next _ ParsedLoop new whileExpr: (ParsedNegation new rcvr: (args1) local op: toEq args: toLoadFalse) doExpr: (args2) local]"macro (perform)"'Generator understands: 'whiledo: block args: args	[block next _ ParsedLoop new whileExpr: (args1) local doExpr: (args2) local]"macro (perform)"'UserView understands: 'eachtimeAgain "eachtime [] is compiled as while user eachtimeAgain do []"	[self kbdnext  160 "escape"]'UserView understands: 'initCompiler  "Initialize shared variables of parser and generators"		| code sel c t	[	Smalltalk declare: (TokenCodes ByteCodes).	[TokenCodesnil [TokenCodes_SymbolTable new init: 32]].	[ByteCodesnil [ByteCodes_SymbolTable new init: 32. Integer sharing: ByteCodes]].	TokenCodes		declare:			(aRightBrack aPeriod "First 2 in this order"			aLeftPar aSemicolon aCondArrow aHand aReturnArrow			aLeftBrack aRightPar aLeftArrow			aBinary "All above must be less, all below must be greater"			aNumber aString "All below must be in that order"			aKeyword aGibberish aColon aDigit aWord)		as:			(1 2			3 4 5 6 7			8 9 10			20			30 31			41 42 43 44 45			).	ByteCodes		declare:			(toLoadField toLoadTemp toLoadLit toLoadLitInd			toLoadCtxt toLoadTempframe			toLoadConst toLoad0 toLoad1 toLoadSelf toLoadNil toLoadFalse toLoadTrue			toSmashPop toSmash toPop toReturn toEnd toLoadThisCtxt toSuper			toShortJmp toShortBfp toLongJmp toLongBfp			toPlus toMinus toGtr toGeq toNext toEq toNew toAsStream			toSendLit)		as:			(0 16 32 64				112 116				120 121 122 113 125 126 127				128 129 130 131 132 133 134				144 152 160 168				176 177 179 181 194 197 203 207				208).	c _ Dictionary new init: 16.	c insertall: (''self'' ''thisContext'' ''super'' ''nil'' ''false'' ''true'')		with: (113 133 134 125 126 127).	ByteCodes declare: stdPrimaries as: c.	c _ Dictionary new init: 64.	code _ 175.	for sel from: SpecialOops (10 to: SpecialOops length) do		[ "Atoms not wanted here -- only strings and characters"		code _ code+1.		selnil  []		sel _ [sel length=1 and (sel1) isletter  false  [sel1] sel asString].		c insert: sel with: code.		].	ByteCodes declare: stdSelectors as: c.	c _ Dictionary new init: 8.	c insertall: (''whiledo'' ''untildo'' ''forto:do'' ''forfrom:do'' ''forfrom:to:by:do'' ''forfrom:to:do'' ''ifthenelse'' ''ifthen'' ''eachtime'')		with: (whiledo:args: untildo:args: fortodo:args: forfromdo:args: forfromtobydo:args: forfromtodo:args: ifthenelse:args: ifthen:args: eachtime:args:).	ByteCodes declare: inLineMsgs as: c.	for t from: ((toLoadFieldLong 0210) (toLoadTempLong 0211) (toLoadLitLong 0212)			(toLoadLitIndLong 0213) (toSendLitLong 0214)			(codeLoadField 0400) (codeLoadTemp 01000) (codeLoadLit 01400)			(codeLoadLitInd 02000) (codeSendLit 02400)) do		[ByteCodes declare: t1 as: t2]]'user initCompiler.