'Turtle tests moved to Turtle.'Turtle understands: 'drawfrom: p1 to: p2 | offset delta dxsign dysign dyabs dxabs error i   	[[pen is: Integer 		[function _ 12 + (function land: 3).		height _ pen.		width _ height.		offset _ pen / 2  (pen / 2)]	pen is: Form 		[function _ function land: 3.		super sourceForm_ pen.		width _ pen width.		height _ pen height.		offset _ pen offset]	user notify: ''pen must be a Form or Integer''].	destx _ (p1 x - offset x) asInteger.	desty _ (p1 y - offset y) asInteger.	delta _ (p2 x - p1 x) asInteger  (p2 y - p1 y) asInteger.	dxsign _ delta x sign.	dysign _ delta y sign.	dyabs _ delta y abs.	dxabs _ delta x abs.	super callBLT.	[dxabs > dyabs 		[error _ dxabs / 2.		for i to: dxabs do			[destx _ destx + dxsign.			error _ error - dyabs.			[error < 0 				[desty _ desty + dysign.				error _ error + dxabs]].			super callBLT]]	error _ dyabs / 2.	for i to: dyabs do		[desty _ desty + dysign.		error _ error - dxabs.		[error < 0 			[destx _ destx + dxsign.			error _ error + dyabs]].		super callBLT]].	pen is: Form  [super release: pen]]' classified: 'As yet unclassified'Turtle understands: 'goto: pt | oldLoc origin 	[origin _ frame center.	oldLoc _ location.	location _ pt.	pendown 		[self drawfrom: oldLoc+origin to: location+origin.		dest  DisplayForm  [user displayFlush]]	]' classified: 'As yet unclassified'FormWindow derstands: turtleTests.Turtle understands: 'turtleTests"  Evaluate the top and bottom doits separately in order...  | w . w _ FormWindow new.	w form: (Form new extent: 300300);		title_ ''Turtle'';		turtlemode: true.	user schedule: w.  | pen i tw .  tw _ user''Turtle''.  tw enter.	pen _ Turtle init: tw frame.	pen color: black; width: 2; inking: oring.	for i to: 100 do		[pen go: i * 4; turn: 89].  tw leave."' classified: 'As yet unclassified'